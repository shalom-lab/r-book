[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R语言入门指南",
    "section": "",
    "text": "前言\n这是一本只讲干货的R语言入门书籍，希望对您有所帮助."
  },
  {
    "objectID": "index.html#r能做什么",
    "href": "index.html#r能做什么",
    "title": "R语言入门指南",
    "section": "R能做什么？",
    "text": "R能做什么？\n\n数据分析\n数据可视化 上海新冠 R作图\n爬取数据 爬数据\n写博客 Shalom的博客\n做网站 Shiny 中华流病\n写书 bookdown"
  },
  {
    "objectID": "index.html#如何学好r语言",
    "href": "index.html#如何学好r语言",
    "title": "R语言入门指南",
    "section": "如何学好R语言?",
    "text": "如何学好R语言?\n\n夯实基础。欲速则不达，打好基础，后续学起来会很轻松。\n比如，你要懂得什么是数据框(dataframe)，什么是行(row)和列(column)，什么是观测(observation)和变量(variable)，什么是包(package)和函数(function)，什么是向量(vector)和列表(list)，基本的术语不算多，掌握好基础你才能很好地组织你的问题，学会提问也是一门学问。初学者切忌啥都不懂，就一心只想实现某个功能，别的一概不问，这样的学习者注定学不好一门语言。\n博观约取。多了解R能做什么，在遇到问题的时候才会想起来用什么。如果自己阅读过的话那就翻出来针对性地仔细阅读，如果是自己也没遇到过得问题，那么请用基本的数据科学术语描述你的问题(例如：如何给数据框增加一列新的变量)，然后在互联网上或者交流社区提出你的问题，我相信，当你把你的问题表述清楚的时候，别人是很乐意回答你的问题的。学会正确的提问真的很重要!\n勤敲代码。眼过千遍不如手敲一遍。刚开始写代码总是需要模仿或者参考别人的代码，当敲的多了，你自然会记住代码。学R的最好方式是实践，所有在Excel中的操作都能在R中实现，从一个简单的筛选做起，将你之前用EXCEL完成的工作换成用R来完成，每一次练习都会提升你的编程技能。"
  },
  {
    "objectID": "index.html#r语言学习资料",
    "href": "index.html#r语言学习资料",
    "title": "R语言入门指南",
    "section": "R语言学习资料",
    "text": "R语言学习资料\n\nhub.rlearner.com 该网站汇集了众多R学习资源\nR论坛 R学习交流社区\n我的博客\n微信公众号：R数据分析与可视化"
  },
  {
    "objectID": "chapter/stats_base.html#连续型随机变量",
    "href": "chapter/stats_base.html#连续型随机变量",
    "title": "19  基础知识",
    "section": "",
    "text": "19.1.1 密度函数/分布函数\n\n概率密度函数累计分布函数累计分布函数的反函数\n\n\n\ndf %&gt;%\n  ggplot(aes(x,pdf))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\ndf %&gt;%\n  ggplot(aes(x,cdf))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\ndf %&gt;%\n  ggplot(aes(cdf,icdf))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n19.1.2 3\\(\\sigma\\)(西格玛)准则\n\nggplot(df,aes(x,pdf))+\n  geom_line()+\n  geom_area(aes(x=ifelse(abs(x)&lt;3,x,NA),fill='0.9974'),alpha=0.5)+\n  geom_area(aes(x=ifelse(abs(x)&lt;2,x,NA),fill='0.9545'),alpha=0.5)+\n  geom_area(aes(x=ifelse(abs(x)&lt;1,x,NA),fill='0.6827'),alpha=0.5)+\n  geom_vline(xintercept =c(-3,-2,-1,1,2,3),linetype='dashed')+\n  scale_x_continuous(breaks=c(-5:5))+\n  labs(x='Z',y='概率密度(pdf)')+\n  scale_fill_futurama()+\n  guides(fill=guide_legend(title='曲线下面积',override.aes = list(alpha=0.2)))\n\n\n\n\n\n\n\n\n\npnorm(1:3)-pnorm(-1:-3)\n\n[1] 0.6826895 0.9544997 0.9973002\n\n\n\n(pnorm(1:3)-pnorm(-1:-3)) %&gt;%\n  `/`(2) %&gt;%\n  `-`(0.5,.) %&gt;%\n  qnorm()\n\n[1] -1 -2 -3\n\n\n\n\n19.1.3 Z检验界值和参考值范围\n\n-qnorm(c(0.005,0.01,0.025,0.05,0.1))\n\n[1] 2.575829 2.326348 1.959964 1.644854 1.281552\n\n\n\n-qnorm(c(0.005,0.01,0.025,0.05,0.1)) %&gt;%\n  pnorm()\n\n[1] 0.995 0.990 0.975 0.950 0.900\n\n\n\n\n19.1.4 频率分布直方图\n\nrunif(10000) %&gt;%\n  qnorm() %&gt;%\n  hist(breaks = 50)",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html#离散型随机变量",
    "href": "chapter/stats_base.html#离散型随机变量",
    "title": "19  基础知识",
    "section": "19.2 离散型随机变量",
    "text": "19.2 离散型随机变量\n\n19.2.1 分布列\n\nrpois(1000,5) %&gt;% \n  table() %&gt;% as.data.frame() %&gt;%\n  setNames(c('k','probality')) %&gt;%\n  adorn_percentages(denominator = 'col') %&gt;%\n  ggplot(aes(k,probality))+\n  geom_col()",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html#ci的含义",
    "href": "chapter/stats_base.html#ci的含义",
    "title": "19  基础知识",
    "section": "19.3 95%CI的含义",
    "text": "19.3 95%CI的含义\n\ndf&lt;-data.frame(miu=runif(1000,min=1,max=100),sigma=runif(1000,min=1,max=20)) %&gt;%\n  rowwise() %&gt;%\n  mutate(sample=list(rnorm(25,miu,sigma)),\n         x_bar=mean(sample),\n         sd=sd(sample),\n         ci_lower=x_bar-1.96*sd/5,\n         ci_upper=x_bar+1.96*sd/5,\n         within_ci=ifelse(miu&gt;=ci_lower & miu &lt;=ci_upper,T,F)) %&gt;%\n  mutate(across(where(is.numeric),~round(.x,2)))\n\ndf\n\n\n  \n\n\nmean(df$within_ci)\n\n[1] 0.922",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/clean_wider_longer.html",
    "href": "chapter/clean_wider_longer.html",
    "title": "17  长宽数据转换",
    "section": "",
    "text": "library(tidyverse)\n\ndata_longer&lt;-data.frame(region=LETTERS[1:3],\n                       year=rep(2019:2023,each=3),\n                       case=round(runif(15)*100))\ndata_longer\n\n\n\n  \n\n\n\n\n17.0.1 长转宽\n\ndata_wider1&lt;-data_longer %&gt;%\n  pivot_wider(id_cols = year,names_from = 'region',values_from = 'case' )\ndata_wider1\n\n\n\n  \n\n\ndata_wider2&lt;-data_longer %&gt;%\n  pivot_wider(id_cols = region,names_from = 'year',names_prefix = 'y_',values_from = 'case' )\ndata_wider2\n\n\n\n  \n\n\n\n\n\n17.0.2 宽转长\n\ndata_longer2&lt;-data_wider1 %&gt;%\n  pivot_longer(c(A,B,C),names_to = 'region',values_to='count')\ndata_longer2\n\n\n\n  \n\n\n\n\n\n17.0.3 作图多用长数据\n\nggplot(data_longer,aes(factor(year),y=case,fill=region))+\n  geom_col(position = 'dodge')+\n  theme_bw()+\n  ggsci::scale_fill_jama()"
  },
  {
    "objectID": "chapter/stats_mcmc.html",
    "href": "chapter/stats_mcmc.html",
    "title": "19  MCMC(学习中)",
    "section": "",
    "text": "library(tidyverse)\n\n\nf &lt;- function(x){\n  p &lt;- 0.4\n  mu &lt;- c(-1, 2)\n  sd &lt;- c(.5, 2)\n    p     * dnorm(x, mu[1], sd[1]) +\n    (1-p) * dnorm(x, mu[2], sd[2])\n}\n\ncurve(f(x), col=\"red\", -4, 8, n=301, las=1)\n\n\n\n\n\nintegrate(f, lower = -Inf, upper = Inf)\n\n1 with absolute error &lt; 7.6e-06\n\n\n\n# 定义概率密度函数（指数分布）\npdf &lt;- function(x, lambda) {\n  dexp(x, rate = lambda)\n}\npdf&lt;-function(x){\n  p &lt;- 0.4\n  mu &lt;- c(-1, 2)\n  sd &lt;- c(.5, 2)\n    p     * dnorm(x, mu[1], sd[1]) +\n    (1-p) * dnorm(x, mu[2], sd[2])\n}\n\n# 初始化MCMC参数\nn_samples &lt;- 10000  # 抽样次数\nproposal_sd &lt;- 0.1  # 提议分布标准差\ncurrent_sample &lt;- runif(1)  # 初始样本值在0到1之间\n\n# 存储抽样结果\nsamples &lt;- numeric(n_samples)\n\n# 运行MCMC抽样\nfor (i in 1:n_samples) {\n  # 从提议分布中抽样一个候选样本\n  candidate_sample &lt;- rnorm(1, mean = current_sample, sd = proposal_sd)\n  \n  # 计算接受率\n  # acceptance_prob &lt;- pdf(candidate_sample, lambda = 2) / pdf(current_sample, lambda = 2)\n   acceptance_prob &lt;- pdf(candidate_sample) / pdf(current_sample)\n  \n  # 决定是否接受候选样本\n  if (runif(1) &lt; acceptance_prob) {\n    current_sample &lt;- candidate_sample\n  }\n  \n  # 存储样本\n  samples[i] &lt;- current_sample\n}\n\n# 打印抽样结果或进行后续分析\nhist(samples[20000:length(samples)], breaks = 100, main = \"MCMC抽样结果\", xlab = \"样本值\",freq = F)\ncurve(f(x), col=\"red\", -4, 8, n=301, las=1,add = T)"
  },
  {
    "objectID": "chapter/base_data_type.html#基本数据类型",
    "href": "chapter/base_data_type.html#基本数据类型",
    "title": "4  数据类型",
    "section": "4.1 基本数据类型",
    "text": "4.1 基本数据类型\nR语言有多种基本的数据类型，包括整型数据(integer)、浮点型数据(floating point)、字符型数据(character)、布尔型数据(logical)、复数型数据(complex)和因子类型数据(factor)。\n\n整型数据: 表示整数值，例如 1 或 -4。\n浮点型数据: 表示带小数点的数值，例如 3.14 或 -0.12。\n字符型数据: 表示文本字符串，例如 \"hello\" 或 \"R is a programming language\"。\n布尔型数据: 表示布尔值，即逻辑值，只有两个值，即 TRUE 或 FALSE。\n复数型数据: 表示复数，例如 3 + 2i 或 -1 + 4i。\n因子类型数据: 用于表示分类变量，例如性别 (男、女) 或季节 (春、夏、秋、冬)。"
  },
  {
    "objectID": "chapter/base_data_type.html#数据结构类型",
    "href": "chapter/base_data_type.html#数据结构类型",
    "title": "4  数据类型",
    "section": "4.2 数据结构类型",
    "text": "4.2 数据结构类型\nR语言中有多种数据结构类型，这些类型都有各自的名称和意义。下面是一些常见的数据结构类型：\n\n向量（vector）：这种类型的数据是一个一维的数值序列，例如c(1, 2, 3, 4)。\n矩阵（matrix）：这种类型的数据是一个二维的数值表格，例如matrix(1:9, nrow = 3)。\n数组（array）：这种类型的数据是一个多维的数值表格，例如array(1:8, dim = c(2, 2, 2))。\n数据框（data.frame）：这种类型的数据是一个二维的表格，可以包含不同类型的变量，例如data.frame(x = 1:3, y = c(“a”, “b”, “c”))。\n列表（list）：这种类型的数据是一个有序的元素集合，可以包含不同类型的对象，例如list(1, “hello”, TRUE)。"
  },
  {
    "objectID": "chapter/base_data_type.html#数据框dataframe的常见操作",
    "href": "chapter/base_data_type.html#数据框dataframe的常见操作",
    "title": "4  数据类型",
    "section": "4.3 数据框(dataframe)的常见操作",
    "text": "4.3 数据框(dataframe)的常见操作\n数据框是 R 语言中一种常用的数据结构，它是一个二维数据表，用于存储一组不同类型的数据，每列数据都有一个对应的列名。\n一些常见的数据框操作包括:\n\n创建数据框: 使用 data.frame() 函数创建数据框。\n查看数据框: 使用 head() 和 tail() 函数查看数据框的前几行和后几行，使用 str() 函数查看数据框的数据类型和结构。\n选择数据框中的某一列: 使用 $ 操作符选择某一列。\n选择数据框中的某一行: 使用行索引选择某一行。\n选择数据框中的某一个值: 使用行索引和列名选择某一个值。\n添加数据框列: 使用 $ 操作符添加新的列。\n添加数据框行: 使用 rbind() 函数添加新的行。\n删除数据框列: 使用 $ 操作符删除某一列。\n删除数据框行: 使用行索引删除某一行。\n排序数据框: 使用 order() 函数对某一列或多列进行排序。\n过滤数据框: 使用布尔运算符过滤数据框中符合条件的行。"
  },
  {
    "objectID": "chapter/base_data_type.html#代码示例",
    "href": "chapter/base_data_type.html#代码示例",
    "title": "4  数据类型",
    "section": "4.4 代码示例",
    "text": "4.4 代码示例\n\n# 创建一个数据框\nmy_data_frame &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# 查看数据框的前几行\nhead(my_data_frame)\n\n\n\n  \n\n\n# 查看数据框的后几行\ntail(my_data_frame)\n\n\n\n  \n\n\n# 查看数据框的数据类型和结构\nstr(my_data_frame)\n\n'data.frame':   3 obs. of  4 variables:\n $ id    : num  1 2 3\n $ name  : chr  \"Alice\" \"Bob\" \"Charlie\"\n $ age   : num  20 25 30\n $ gender: chr  \"F\" \"M\" \"M\"\n\n# 选择数据框中的某一列\nmy_data_frame$name\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n# 选择数据框中的某一行\nmy_data_frame[2, ]\n\n\n\n  \n\n\n# 选择数据框中的某一个值\nmy_data_frame[2, \"name\"]\n\n[1] \"Bob\"\n\n# 添加数据框列\nmy_data_frame$score &lt;- c(90, 85, 80)\n\n# 添加数据框行\nnew_row &lt;- data.frame(id = 4, name = \"David\", age = 32, gender = \"M\", score = 75)\nmy_data_frame &lt;- rbind(my_data_frame, new_row)\n\n# 删除数据框列\nmy_data_frame$score &lt;- NULL\n\n# 删除数据框行\nmy_data_frame &lt;- my_data_frame[-2, ]\n\n# 排序数据框\nmy_data_frame &lt;- my_data_frame[order(my_data_frame$age), ]\n\n# 过滤数据框\nmy_data_frame[my_data_frame$age &gt;= 25, ]"
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引",
    "href": "chapter/base_data_type.html#行索引和列索引",
    "title": "4  数据类型",
    "section": "4.5 行索引和列索引",
    "text": "4.5 行索引和列索引\n在 R 语言中，数据框是一种二维数据表，其中每行表示一个观察值，每列表示一个变量。数据框的行索引和列索引是用来确定某一个特定的数据值的位置的方法。\n\n行索引: 数据框的行索引是从 1 开始的正整数，用来标识每一行。例如，在上面的代码中，第一行的行索引是 1，第二行的行索引是 2，以此类推。\n列索引: 数据框的列索引是列名，用来标识每一列。例如，在上面的代码中，第一列的列索引是 id，第二列的列索引是 name，以此类推。\n\n我们可以使用行索引和列索引来选择数据框中的某一个值。例如，如果我们想选择第二行第三列的值，可以使用 my_data_frame[2, \"age\"] 这样的语法。"
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引的常见用法",
    "href": "chapter/base_data_type.html#行索引和列索引的常见用法",
    "title": "4  数据类型",
    "section": "4.6 行索引和列索引的常见用法",
    "text": "4.6 行索引和列索引的常见用法\n行索引和列索引在 R 语言中都非常常见，它们有许多用途。下面是一些常见的行索引和列索引的用法:\n\n选择数据框中的某一个值: 可以使用行索引和列索引选择数据框中的某一个值。例如，my_data_frame[2, \"name\"] 表示选择第二行第 name 列的值。\n添加数据框行: 可以使用行索引和 rbind() 函数添加新的行到数据框中。例如，my_data_frame &lt;- rbind(my_data_frame, new_row) 表示将新的行 new_row 添加到数据框 my_data_frame 的末尾。\n删除数据框行: 可以使用行索引删除数据框中的某一行。例如，my_data_frame &lt;- my_data_frame[-2, ] 表示删除数据框 my_data_frame 中的第二行。\n排序数据框: 可以使用行索引和 order() 函数对数据框进行排序。例如，my_data_frame &lt;- my_data_frame[order(my_data_frame$age), ] 表示根据 age 列对数据框 `"
  },
  {
    "objectID": "chapter/base_data_type.html#在r语言中的含义",
    "href": "chapter/base_data_type.html#在r语言中的含义",
    "title": "4  数据类型",
    "section": "4.7 []在R语言中的含义",
    "text": "4.7 []在R语言中的含义\n在 R 语言中，[] 符号用来表示数据结构的索引。具体来说，它表示选择数据结构中的某一部分。例如，如果 my_data 是一个数据框，那么 my_data[2, \"name\"] 表示选择数据框 my_data 中的第二行第 name 列的值。\n在 R 语言中，[] 符号还可以用来进行其他操作，例如排序、过滤、删除等。它还可以用来创建新的数据结构，例如向量、数组、数据框等。有关具体用法，您可以参考 R 语言的相关文档和教程。"
  },
  {
    "objectID": "chapter/base_data_type.html#r语言中-和的区别",
    "href": "chapter/base_data_type.html#r语言中-和的区别",
    "title": "4  数据类型",
    "section": "4.8 R语言中<-和=的区别",
    "text": "4.8 R语言中&lt;-和=的区别\n在 R 语言中，&lt;- 和 = 都可以用来赋值，但它们之间还是有一些区别的。\n\n&lt;-: 这是 R 语言中最常用的赋值操作符。它用来将右侧的值赋给左侧的变量。例如，x &lt;- 5 表示将 5 赋给变量 x。\n=: 这是 R 语言中次常用的赋值操作符。它的语法与 &lt;- 类似，也用来将右侧的值赋给左侧的变量。例如，x = 5 也表示将 5 赋给变量 x。\n\n在实际使用中，&lt;- 和 = 的区别主要在于语义上的差异。通常来说，&lt;- 操作符更加符合人类的思维方式，因为它更加形象地表达了赋值的意义（即将值从右向左流动）。而 = 操作符则更像是一个等号，表示变量与值相等。\n在 R 语言中，一般来说，&lt;- 操作符更加常用，并且在 R 语言的文档和教程中也更常见。但 = 操作符也是可以使用的，它们之间并没有严格的限制。您可以根据个人喜好来选择使用哪一个。\n总的来说，建议使用 &lt;- 操作符进行赋值，这样能够更好地保持统一，并且能够更方便地理解代码。"
  },
  {
    "objectID": "chapter/base_data_type.html#中缺省行索引和列索引的意义",
    "href": "chapter/base_data_type.html#中缺省行索引和列索引的意义",
    "title": "4  数据类型",
    "section": "4.9 []中缺省行索引和列索引的意义",
    "text": "4.9 []中缺省行索引和列索引的意义\n在 R 语言中，当 [] 符号中的行索引或列索引缺省时，它们会被自动填充为默认值。\n对于行索引，如果缺省，默认值是 1:n，其中 n 是数据框中的行数。例如，如果 my_data 是一个数据框，那么 my_data[, \"name\"] 和 my_data[1:n, \"name\"] 是等价的，都表示选择数据框 my_data 中的所有行的 name 列。\n对于列索引，如果缺省，默认值是所有列的名称。例如，如果 my_data 是一个数据框，那么 my_data[2, ] 和 my_data[2, colnames(my_data)] 是等价的，都表示选择数据框 my_data 中的第二行的所有列。\n通过使用缺省行索引和列索引，可以使代码更简洁易读。例如，我们可以使用 my_data[, \"name\"] 表示选择数据框 my_data 中的所有行的 name 列，而不用写出每一行的行索引。这样做既能够保证代码的正确性，又能够提高代码的可读性。\n当然，在实际使用中，还需要注意一些特殊情况。例如，如果缺省行索引和列索引可能导致代码不易理解，或者会与其他语法产生冲突，那么就需要明确指定行索引和列索引了。总之，在使用 [] 符号时，应该根据实际情况谨慎选择是否使用缺省行索引和列索引。"
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引也可以填写布尔值吗",
    "href": "chapter/base_data_type.html#行索引和列索引也可以填写布尔值吗",
    "title": "4  数据类型",
    "section": "4.10 行索引和列索引也可以填写布尔值吗？",
    "text": "4.10 行索引和列索引也可以填写布尔值吗？\n是的，在 R 语言中，行索引和列索引也可以填写布尔值。这种用法可以用来选择数据框中满足某一条件的行和列。\n例如，如果 my_data 是一个数据框，那么 my_data[my_data$age &gt; 30, ] 表示选择数据框 my_data 中 age 列大于 30 的所有行。如果我们还想选择其中的 name 和 age 列，可以使用如下语句:\n\nmy_data &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\nmy_data[my_data$age &gt; 25, c(\"name\", \"age\")]\n\n\n\n  \n\n\n\n这样，我们就可以快速选择数据框中满足某一条件的行和列了。这种方法非常方便，并且能够有效地过滤数据，为进一步的分析提供更为精细的数据。\n需要注意的是，在使用行索引和列索引时，需要确保它们的长度与数据框的行数和列数相同。如果长度不匹配，那么可能会导致代码出错或不能正常运行。因此，在使用行索引和列索引时，应该认真检查代码是否正确。"
  },
  {
    "objectID": "chapter/viz_bar.html",
    "href": "chapter/viz_bar.html",
    "title": "18  主题",
    "section": "",
    "text": "library(tidyverse)\ntheme_set(theme_bw())\n\n\ndata&lt;-data.frame(x=rep(c('A','B','C'),time=2),y=c('Female','Male'),value=round(runif(6,20,100)))\n\ndata\n\n\n  \n\n\n\n\nggplot(data,aes(x,value,fill=y))+\n  geom_col()\n\n\n\n\n\n\n\n\n\n18.0.1 坐标轴标题-axis.title\n\nggplot(mtcars,aes(cyl,mpg))+\n  labs(x='hjust=0.2,vjust = -3',y='hjust=0.8,vjust = 3')+\n  theme(axis.title = element_text(colour = 'red',face='bold'),\n        axis.title.x = element_text(hjust=0.2,vjust = -3),\n        axis.title.y = element_text(hjust=0.8,vjust = 3)\n        )",
    "crumbs": [
      "数据可视化",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>ggplot2</span>"
    ]
  },
  {
    "objectID": "chapter/clean_date.html",
    "href": "chapter/clean_date.html",
    "title": "14  最佳推荐-lubridate包",
    "section": "",
    "text": "14.1 基本用法",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>日期处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_date.html#基本用法",
    "href": "chapter/clean_date.html#基本用法",
    "title": "14  最佳推荐-lubridate包",
    "section": "",
    "text": "14.1.1 字符串转日期\n\nymd('20221221','2023-12-21','2023/2/21','20/2/21')\n\n[1] \"2022-12-21\" \"2023-12-21\" \"2023-02-21\" \"2020-02-21\"\n\nmdy('12212022','12212023','12/21/2023','2/21/20')\n\n[1] \"2022-12-21\" \"2023-12-21\" \"2023-12-21\" \"2020-02-21\"\n\n\n\n\n14.1.2 时间间隔\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/years(1)\n\n[1] 1\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/months(3)\n\n[1] 4\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/weeks(1)\n\n[1] 52.14286\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/days(1)\n\n[1] 365\n\n\n\n\n14.1.3 年月提取\n\nymd('2021-12-21') %&gt;% year()\n\n[1] 2021\n\nymd('2021-12-21') %&gt;% month()\n\n[1] 12\n\nymd('2021-12-21') %&gt;% week()\n\n[1] 51\n\nymd('2021-12-21') %&gt;% day()\n\n[1] 21\n\n\n\n\n14.1.4 日期运算\n\nymd('2021-12-21')+days(365)\n\n[1] \"2022-12-21\"\n\nymd('2021-12-21')+weeks(52)\n\n[1] \"2022-12-20\"\n\nymd('2021-12-21')+months(12)\n\n[1] \"2022-12-21\"\n\nymd('2021-12-21')+years(1)\n\n[1] \"2022-12-21\"",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>日期处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_date.html#实战应用",
    "href": "chapter/clean_date.html#实战应用",
    "title": "14  最佳推荐-lubridate包",
    "section": "14.2 实战应用",
    "text": "14.2 实战应用\n\n14.2.1 年龄计算\nHIS系统住院数据模拟，计算就诊年月周，就诊年龄，住院天数\n\ndata&lt;-data.frame(id=1:6,birth_date=paste(2021,1,1:6,sep='-'),\n                 admit_date=paste(2023,5:10,6:1,sep='-'),\n                 disch_date=paste(2023,5:10,6:11,sep='-'))\ndata\n\n\n  \n\n\n\n\ndata %&gt;%\n  mutate(birth_date=ymd(birth_date),\n         admit_date=ymd(admit_date),\n         disch_date=ymd(disch_date),\n         age=interval(birth_date,admit_date)/years(1),\n         los=interval(admit_date,disch_date)/days(1)) %&gt;%\n  mutate(year=year(admit_date),\n         month=month(admit_date),\n         week=week(admit_date))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>日期处理</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html",
    "href": "chapter/stats_base.html",
    "title": "19  基础知识",
    "section": "",
    "text": "19.1 连续型随机变量\ndf&lt;-data.frame(x=seq(-5,5,by=0.01)) %&gt;%\n  mutate(pdf=dnorm(x),cdf=pnorm(x),icdf=qnorm(cdf))\n\ndf",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/clean_pipe.html",
    "href": "chapter/clean_pipe.html",
    "title": "12  管道符-%>%",
    "section": "",
    "text": "12.0.1 常见用法\n\nlibrary(tidyverse)\n\nsub&lt;-function(x,y){ #自定义求差函数\n  x-y\n}\n\nsub(1,2)\n\n[1] -1\n\nsub(2,3)\n\n[1] -1\n\n\n\n#借用管道符调用\n1 %&gt;% sub(2)\n\n[1] -1\n\n2 %&gt;% sub(3)\n\n[1] -1\n\n#连续调用\n3 %&gt;% sub(1) %&gt;% sub(2)\n\n[1] 0\n\nmean(1:10)\n\n[1] 5.5\n\n1:10 %&gt;% mean() %&gt;% class()\n\n[1] \"numeric\"\n\n\n\n\n12.0.2 指定位置\n\n1 %&gt;% sub(2,.)\n\n[1] 1\n\n1 %&gt;% sub(.,2)\n\n[1] -1\n\n1 %&gt;% sub(.,.)\n\n[1] 0\n\nmean(c(1:10,NA))\n\n[1] NA\n\nmean(c(1:10,NA),na.rm=TRUE)\n\n[1] 5.5\n\nTRUE %&gt;% mean(c(1:10,NA),na.rm=.)\n\n[1] 5.5\n\n\n\n\n12.0.3 实战应用\n管道符的优势即是连续调用\n\nmtcars %&gt;%\n  filter(cyl==4) %&gt;%\n  mutate(mpg2=mpg+100) %&gt;%\n  select(cyl,mpg,mpg2) %&gt;%\n  head()\n\n\n  \n\n\n\n等价于\n\nhead(select(mutate(filter(mtcars,cyl==4),mpg2=mpg+100),cyl,mpg,mpg2))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>管道符%>%</span>"
    ]
  }
]