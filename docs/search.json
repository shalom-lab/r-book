[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R语言入门指南",
    "section": "",
    "text": "前言\n这是一本只讲干货的R语言入门书籍，希望对您有所帮助.",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#r能做什么",
    "href": "index.html#r能做什么",
    "title": "R语言入门指南",
    "section": "R能做什么？",
    "text": "R能做什么？\n\n数据分析\n数据可视化 上海新冠 R作图\n爬取数据 爬数据\n写博客 Shalom的博客\n做网站 Shiny 中华流病\n写书 bookdown",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#如何学好r语言",
    "href": "index.html#如何学好r语言",
    "title": "R语言入门指南",
    "section": "如何学好R语言?",
    "text": "如何学好R语言?\n\n夯实基础。欲速则不达，打好基础，后续学起来会很轻松。\n比如，你要懂得什么是数据框(dataframe)，什么是行(row)和列(column)，什么是观测(observation)和变量(variable)，什么是包(package)和函数(function)，什么是向量(vector)和列表(list)，基本的术语不算多，掌握好基础你才能很好地组织你的问题，学会提问也是一门学问。初学者切忌啥都不懂，就一心只想实现某个功能，别的一概不问，这样的学习者注定学不好一门语言。\n博观约取。多了解R能做什么，在遇到问题的时候才会想起来用什么。如果自己阅读过的话那就翻出来针对性地仔细阅读，如果是自己也没遇到过得问题，那么请用基本的数据科学术语描述你的问题(例如：如何给数据框增加一列新的变量)，然后在互联网上或者交流社区提出你的问题，我相信，当你把你的问题表述清楚的时候，别人是很乐意回答你的问题的。学会正确的提问真的很重要!\n勤敲代码。眼过千遍不如手敲一遍。刚开始写代码总是需要模仿或者参考别人的代码，当敲的多了，你自然会记住代码。学R的最好方式是实践，所有在Excel中的操作都能在R中实现，从一个简单的筛选做起，将你之前用EXCEL完成的工作换成用R来完成，每一次练习都会提升你的编程技能。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "index.html#r语言学习资料",
    "href": "index.html#r语言学习资料",
    "title": "R语言入门指南",
    "section": "R语言学习资料",
    "text": "R语言学习资料\n\nhub.rlearner.com 该网站汇集了众多R学习资源\nR论坛 R学习交流社区\n我的博客\n微信公众号：R数据分析与可视化",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "chapter/base_install.html",
    "href": "chapter/base_install.html",
    "title": "1  安装",
    "section": "",
    "text": "1.1 安装R",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>安装</span>"
    ]
  },
  {
    "objectID": "chapter/base_install.html#安装r",
    "href": "chapter/base_install.html#安装r",
    "title": "1  安装",
    "section": "",
    "text": "下载R安装程序： 访问R官方网站，选择一个离您位置较近的镜像站点，然后在页面上找到适合您操作系统的安装程序链接。\n运行安装程序： 下载完成后，运行下载的安装程序。您可能会看到一些安装选项，可以根据您的偏好进行选择，但通常情况下，您可以选择默认选项。\n选择安装位置： 在安装过程中，您可能需要选择R的安装位置。通常情况下，保留默认安装位置即可。\n完成安装： 完成上述步骤后，安装程序将开始将R安装到您的计算机上。等待安装完成。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>安装</span>"
    ]
  },
  {
    "objectID": "chapter/base_install.html#安装rstudio",
    "href": "chapter/base_install.html#安装rstudio",
    "title": "1  安装",
    "section": "1.2 安装RStudio",
    "text": "1.2 安装RStudio\n\n下载RStudio安装程序： 访问RStudio官方网站，找到免费版本的RStudio Desktop，并选择适合您操作系统的安装程序。\n运行安装程序： 下载完成后，运行安装程序。同样，您可能会看到一些安装选项，可以根据需要进行选择。\n完成安装： 安装程序将开始将RStudio安装到您的计算机上。等待安装完成。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>安装</span>"
    ]
  },
  {
    "objectID": "chapter/base_install.html#启动rstudio",
    "href": "chapter/base_install.html#启动rstudio",
    "title": "1  安装",
    "section": "1.3 启动RStudio",
    "text": "1.3 启动RStudio\n安装完成后，您可以从开始菜单（在Windows上）或应用程序列表中找到RStudio的图标，双击它以启动RStudio。\n请注意，这里提供的是Windows操作系统上的步骤。如果您使用的是Mac或Linux操作系统，步骤可能会稍有不同，但基本原理是相似的。安装完成后，您可以在RStudio中轻松编写和运行R代码，进行数据分析和统计建模等工作。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>安装</span>"
    ]
  },
  {
    "objectID": "chapter/base_rstudio.html",
    "href": "chapter/base_rstudio.html",
    "title": "2  Rstudio与R的区别与联系",
    "section": "",
    "text": "2.1 Rstudio的常用快捷键有哪些？",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rstudio</span>"
    ]
  },
  {
    "objectID": "chapter/base_rstudio.html#rstudio的常用快捷键有哪些",
    "href": "chapter/base_rstudio.html#rstudio的常用快捷键有哪些",
    "title": "2  Rstudio与R的区别与联系",
    "section": "",
    "text": "执行R代码并跳到下一行：按Ctrl + Enter键可以快速执行当前光标所在行的R代码，并跳到下一行。\n快速执行R代码：按Alt + Enter键可以快速执行当前光标所在行的R代码。\n快速注释/取消注释：按Ctrl + Shift + C键可以快速将当前光标所在行的R代码注释掉，再次按下该快捷键可以取消注释。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rstudio</span>"
    ]
  },
  {
    "objectID": "chapter/base_rstudio.html#rstudio新建r项目project",
    "href": "chapter/base_rstudio.html#rstudio新建r项目project",
    "title": "2  Rstudio与R的区别与联系",
    "section": "2.2 Rstudio新建R项目(Project)",
    "text": "2.2 Rstudio新建R项目(Project)\nRStudio提供了一个项目管理功能，可以帮助您管理项目代码。下面是使用RStudio新建项目代码的步骤：\n\n打开RStudio，在”文件”菜单中，选择”新建项目”。\n在弹出的对话框中，选择项目的存储位置和类型。\n点击”确定”按钮，RStudio就会为您创建一个新项目。\n在项目中，您可以通过”文件”菜单或”文件浏览器”窗口来创建、打开、保存和关闭R代码文件。\n在项目中，您可以通过”代码”菜单或”编辑”按钮来编辑R代码文件。\n在项目中，您可以通过”控制台”窗口来输入和执行R代码。\n在项目中，您可以通过”终端”窗口来执行Shell命令。\n在项目中，您可以通过”工作空间和环境”窗口来查看当前工作空间中的对象和数据集。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rstudio</span>"
    ]
  },
  {
    "objectID": "chapter/base_rstudio.html#r项目的一般文件构成",
    "href": "chapter/base_rstudio.html#r项目的一般文件构成",
    "title": "2  Rstudio与R的区别与联系",
    "section": "2.3 R项目的一般文件构成",
    "text": "2.3 R项目的一般文件构成\nRStudio project项目是一种用于管理R代码和数据的文件夹，通常包含以下文件和文件夹：\n\n.Rproj文件：这是项目的主文件，RStudio会识别它并打开项目。\n.Rhistory文件：这是项目的历史记录文件，包含执行的所有R代码。\n.RData文件：这是项目的工作空间文件，包含执行的所有R代码中定义的对象和数据集。\n.Renviron文件：这是项目的环境变量文件，包含定义的所有环境变量。\ndata文件夹：这是项目的数据文件夹，包含项目中使用的所有数据文件。\nR文件夹：这是项目的代码文件夹，包含项目中使用的所有R代码文件。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Rstudio</span>"
    ]
  },
  {
    "objectID": "chapter/base_operator.html",
    "href": "chapter/base_operator.html",
    "title": "3  常用操作",
    "section": "",
    "text": "3.1 赋值\na&lt;-1\na\n\n[1] 1\n\nb=2 #不推荐，避免用等号\nb\n\n[1] 2\n\n3-&gt;c #不常用\nc\n\n[1] 3\n\nassign('d',4) #高级用法\nd\n\n[1] 4",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>运算符</span>"
    ]
  },
  {
    "objectID": "chapter/base_operator.html#和的区别",
    "href": "chapter/base_operator.html#和的区别",
    "title": "3  常用操作",
    "section": "3.2 <-和=的区别",
    "text": "3.2 &lt;-和=的区别\n在 R 语言中，&lt;- 和 = 都可以用来赋值，但它们之间还是有一些区别的。\n\n&lt;-: 这是 R 语言中最常用的赋值操作符。它用来将右侧的值赋给左侧的变量。例如，x &lt;- 5 表示将 5 赋给变量 x。\n=: 这是 R 语言中次常用的赋值操作符。它的语法与 &lt;- 类似，也用来将右侧的值赋给左侧的变量。例如，x = 5 也表示将 5 赋给变量 x。\n\n在实际使用中，&lt;- 和 = 的区别主要在于语义上的差异。通常来说，&lt;- 操作符更加符合人类的思维方式，因为它更加形象地表达了赋值的意义（即将值从右向左流动）。而 = 操作符则更像是一个等号，表示变量与值相等。建议使用 &lt;- 操作符进行赋值，这样能够更好地保持统一，并且能够更方便地理解代码。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>运算符</span>"
    ]
  },
  {
    "objectID": "chapter/base_operator.html#运算",
    "href": "chapter/base_operator.html#运算",
    "title": "3  常用操作",
    "section": "3.3 运算",
    "text": "3.3 运算\n\n1+2\n\n[1] 3\n\n1-2\n\n[1] -1\n\n1/2\n\n[1] 0.5\n\n1*2\n\n[1] 2\n\n2^3 # 3次方\n\n[1] 8\n\n5 %/% 2 #取商\n\n[1] 2\n\n5 %% 2 #取余\n\n[1] 1",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>运算符</span>"
    ]
  },
  {
    "objectID": "chapter/base_operator.html#判断",
    "href": "chapter/base_operator.html#判断",
    "title": "3  常用操作",
    "section": "3.4 判断",
    "text": "3.4 判断\n\nT & F  #与 and\n\n[1] FALSE\n\nT || F #或 or\n\n[1] TRUE\n\n!T #非 not\n\n[1] FALSE",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>运算符</span>"
    ]
  },
  {
    "objectID": "chapter/base_operator.html#取子集",
    "href": "chapter/base_operator.html#取子集",
    "title": "3  常用操作",
    "section": "3.5 取子集",
    "text": "3.5 取子集\n[] 取向量中的某些元素,起始为1\n\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\nmonth.abb[1]\n\n[1] \"Jan\"\n\nmonth.abb[c(1,3,5)]\n\n[1] \"Jan\" \"Mar\" \"May\"\n\n\n$ 取数据框data.frame的某一列/取列表list的某一项\n\nhead(mtcars)\n\n\n  \n\n\nclass(mtcars)\n\n[1] \"data.frame\"\n\nnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n\nmtcars$mpg\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\n\nls&lt;-list(a=1,b=month.abb)\nclass(ls)\n\n[1] \"list\"\n\nls$b\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n\n[[]]取列表某一项等\n\nls&lt;-list(a=1,b=month.abb)\nls[[b]]\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\nls[[2]]\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>运算符</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html",
    "href": "chapter/base_data_type.html",
    "title": "4  数据类型",
    "section": "",
    "text": "4.1 基本数据类型\nR语言有多种基本的数据类型，包括整型数据(integer)、浮点型数据(floating point)、字符型数据(character)、布尔型数据(logical)、复数型数据(complex)和因子类型数据(factor)。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#基本数据类型",
    "href": "chapter/base_data_type.html#基本数据类型",
    "title": "4  数据类型",
    "section": "",
    "text": "整型数据: 表示整数值，例如 1 或 -4。\n浮点型数据: 表示带小数点的数值，例如 3.14 或 -0.12。\n字符型数据: 表示文本字符串，例如 \"hello\" 或 \"R is a programming language\"。\n布尔型数据: 表示布尔值，即逻辑值，只有两个值，即 TRUE 或 FALSE。\n复数型数据: 表示复数，例如 3 + 2i 或 -1 + 4i。\n因子类型数据: 用于表示分类变量，例如性别 (男、女) 或季节 (春、夏、秋、冬)。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#数据结构类型",
    "href": "chapter/base_data_type.html#数据结构类型",
    "title": "4  数据类型",
    "section": "4.2 数据结构类型",
    "text": "4.2 数据结构类型\nR语言中有多种数据结构类型，这些类型都有各自的名称和意义。下面是一些常见的数据结构类型：\n\n向量（vector）：这种类型的数据是一个一维的数值序列，例如c(1, 2, 3, 4)。\n矩阵（matrix）：这种类型的数据是一个二维的数值表格，例如matrix(1:9, nrow = 3)。\n数组（array）：这种类型的数据是一个多维的数值表格，例如array(1:8, dim = c(2, 2, 2))。\n数据框（data.frame）：这种类型的数据是一个二维的表格，可以包含不同类型的变量，例如data.frame(x = 1:3, y = c(“a”, “b”, “c”))。\n列表（list）：这种类型的数据是一个有序的元素集合，可以包含不同类型的对象，例如list(1, “hello”, TRUE)。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#数据框dataframe的常见操作",
    "href": "chapter/base_data_type.html#数据框dataframe的常见操作",
    "title": "4  数据类型",
    "section": "4.3 数据框(dataframe)的常见操作",
    "text": "4.3 数据框(dataframe)的常见操作\n数据框是 R 语言中一种常用的数据结构，它是一个二维数据表，用于存储一组不同类型的数据，每列数据都有一个对应的列名。\n一些常见的数据框操作包括:\n\n创建数据框: 使用 data.frame() 函数创建数据框。\n查看数据框: 使用 head() 和 tail() 函数查看数据框的前几行和后几行，使用 str() 函数查看数据框的数据类型和结构。\n选择数据框中的某一列: 使用 $ 操作符选择某一列。\n选择数据框中的某一行: 使用行索引选择某一行。\n选择数据框中的某一个值: 使用行索引和列名选择某一个值。\n添加数据框列: 使用 $ 操作符添加新的列。\n添加数据框行: 使用 rbind() 函数添加新的行。\n删除数据框列: 使用 $ 操作符删除某一列。\n删除数据框行: 使用行索引删除某一行。\n排序数据框: 使用 order() 函数对某一列或多列进行排序。\n过滤数据框: 使用布尔运算符过滤数据框中符合条件的行。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#代码示例",
    "href": "chapter/base_data_type.html#代码示例",
    "title": "4  数据类型",
    "section": "4.4 代码示例",
    "text": "4.4 代码示例\n\n# 创建一个数据框\nmy_data_frame &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# 查看数据框的前几行\nhead(my_data_frame)\n\n\n  \n\n\n# 查看数据框的后几行\ntail(my_data_frame)\n\n\n  \n\n\n# 查看数据框的数据类型和结构\nstr(my_data_frame)\n\n'data.frame':   3 obs. of  4 variables:\n $ id    : num  1 2 3\n $ name  : chr  \"Alice\" \"Bob\" \"Charlie\"\n $ age   : num  20 25 30\n $ gender: chr  \"F\" \"M\" \"M\"\n\n# 选择数据框中的某一列\nmy_data_frame$name\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n# 选择数据框中的某一行\nmy_data_frame[2, ]\n\n\n  \n\n\n# 选择数据框中的某一个值\nmy_data_frame[2, \"name\"]\n\n[1] \"Bob\"\n\n# 添加数据框列\nmy_data_frame$score &lt;- c(90, 85, 80)\n\n# 添加数据框行\nnew_row &lt;- data.frame(id = 4, name = \"David\", age = 32, gender = \"M\", score = 75)\nmy_data_frame &lt;- rbind(my_data_frame, new_row)\n\n# 删除数据框列\nmy_data_frame$score &lt;- NULL\n\n# 删除数据框行\nmy_data_frame &lt;- my_data_frame[-2, ]\n\n# 排序数据框\nmy_data_frame &lt;- my_data_frame[order(my_data_frame$age), ]\n\n# 过滤数据框\nmy_data_frame[my_data_frame$age &gt;= 25, ]",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引",
    "href": "chapter/base_data_type.html#行索引和列索引",
    "title": "4  数据类型",
    "section": "4.5 行索引和列索引",
    "text": "4.5 行索引和列索引\n在 R 语言中，数据框是一种二维数据表，其中每行表示一个观察值，每列表示一个变量。数据框的行索引和列索引是用来确定某一个特定的数据值的位置的方法。\n\n行索引: 数据框的行索引是从 1 开始的正整数，用来标识每一行。例如，在上面的代码中，第一行的行索引是 1，第二行的行索引是 2，以此类推。\n列索引: 数据框的列索引是列名，用来标识每一列。例如，在上面的代码中，第一列的列索引是 id，第二列的列索引是 name，以此类推。\n\n我们可以使用行索引和列索引来选择数据框中的某一个值。例如，如果我们想选择第二行第三列的值，可以使用 my_data_frame[2, \"age\"] 这样的语法。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引的常见用法",
    "href": "chapter/base_data_type.html#行索引和列索引的常见用法",
    "title": "4  数据类型",
    "section": "4.6 行索引和列索引的常见用法",
    "text": "4.6 行索引和列索引的常见用法\n行索引和列索引在 R 语言中都非常常见，它们有许多用途。下面是一些常见的行索引和列索引的用法:\n\n选择数据框中的某一个值: 可以使用行索引和列索引选择数据框中的某一个值。例如，my_data_frame[2, \"name\"] 表示选择第二行第 name 列的值。\n添加数据框行: 可以使用行索引和 rbind() 函数添加新的行到数据框中。例如，my_data_frame &lt;- rbind(my_data_frame, new_row) 表示将新的行 new_row 添加到数据框 my_data_frame 的末尾。\n删除数据框行: 可以使用行索引删除数据框中的某一行。例如，my_data_frame &lt;- my_data_frame[-2, ] 表示删除数据框 my_data_frame 中的第二行。\n排序数据框: 可以使用行索引和 order() 函数对数据框进行排序。例如，my_data_frame &lt;- my_data_frame[order(my_data_frame$age), ] 表示根据 age 列对数据框 `",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#在r语言中的含义",
    "href": "chapter/base_data_type.html#在r语言中的含义",
    "title": "4  数据类型",
    "section": "4.7 []在R语言中的含义",
    "text": "4.7 []在R语言中的含义\n在 R 语言中，[] 符号用来表示数据结构的索引。具体来说，它表示选择数据结构中的某一部分。例如，如果 my_data 是一个数据框，那么 my_data[2, \"name\"] 表示选择数据框 my_data 中的第二行第 name 列的值。\n在 R 语言中，[] 符号还可以用来进行其他操作，例如排序、过滤、删除等。它还可以用来创建新的数据结构，例如向量、数组、数据框等。有关具体用法，您可以参考 R 语言的相关文档和教程。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#r语言中-和的区别",
    "href": "chapter/base_data_type.html#r语言中-和的区别",
    "title": "4  数据类型",
    "section": "4.8 R语言中<-和=的区别",
    "text": "4.8 R语言中&lt;-和=的区别\n在 R 语言中，&lt;- 和 = 都可以用来赋值，但它们之间还是有一些区别的。\n\n&lt;-: 这是 R 语言中最常用的赋值操作符。它用来将右侧的值赋给左侧的变量。例如，x &lt;- 5 表示将 5 赋给变量 x。\n=: 这是 R 语言中次常用的赋值操作符。它的语法与 &lt;- 类似，也用来将右侧的值赋给左侧的变量。例如，x = 5 也表示将 5 赋给变量 x。\n\n在实际使用中，&lt;- 和 = 的区别主要在于语义上的差异。通常来说，&lt;- 操作符更加符合人类的思维方式，因为它更加形象地表达了赋值的意义（即将值从右向左流动）。而 = 操作符则更像是一个等号，表示变量与值相等。\n在 R 语言中，一般来说，&lt;- 操作符更加常用，并且在 R 语言的文档和教程中也更常见。但 = 操作符也是可以使用的，它们之间并没有严格的限制。您可以根据个人喜好来选择使用哪一个。\n总的来说，建议使用 &lt;- 操作符进行赋值，这样能够更好地保持统一，并且能够更方便地理解代码。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#中缺省行索引和列索引的意义",
    "href": "chapter/base_data_type.html#中缺省行索引和列索引的意义",
    "title": "4  数据类型",
    "section": "4.9 []中缺省行索引和列索引的意义",
    "text": "4.9 []中缺省行索引和列索引的意义\n在 R 语言中，当 [] 符号中的行索引或列索引缺省时，它们会被自动填充为默认值。\n对于行索引，如果缺省，默认值是 1:n，其中 n 是数据框中的行数。例如，如果 my_data 是一个数据框，那么 my_data[, \"name\"] 和 my_data[1:n, \"name\"] 是等价的，都表示选择数据框 my_data 中的所有行的 name 列。\n对于列索引，如果缺省，默认值是所有列的名称。例如，如果 my_data 是一个数据框，那么 my_data[2, ] 和 my_data[2, colnames(my_data)] 是等价的，都表示选择数据框 my_data 中的第二行的所有列。\n通过使用缺省行索引和列索引，可以使代码更简洁易读。例如，我们可以使用 my_data[, \"name\"] 表示选择数据框 my_data 中的所有行的 name 列，而不用写出每一行的行索引。这样做既能够保证代码的正确性，又能够提高代码的可读性。\n当然，在实际使用中，还需要注意一些特殊情况。例如，如果缺省行索引和列索引可能导致代码不易理解，或者会与其他语法产生冲突，那么就需要明确指定行索引和列索引了。总之，在使用 [] 符号时，应该根据实际情况谨慎选择是否使用缺省行索引和列索引。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引也可以填写布尔值吗",
    "href": "chapter/base_data_type.html#行索引和列索引也可以填写布尔值吗",
    "title": "4  数据类型",
    "section": "4.10 行索引和列索引也可以填写布尔值吗？",
    "text": "4.10 行索引和列索引也可以填写布尔值吗？\n是的，在 R 语言中，行索引和列索引也可以填写布尔值。这种用法可以用来选择数据框中满足某一条件的行和列。\n例如，如果 my_data 是一个数据框，那么 my_data[my_data$age &gt; 30, ] 表示选择数据框 my_data 中 age 列大于 30 的所有行。如果我们还想选择其中的 name 和 age 列，可以使用如下语句:\n\nmy_data &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\nmy_data[my_data$age &gt; 25, c(\"name\", \"age\")]\n\n\n  \n\n\n\n这样，我们就可以快速选择数据框中满足某一条件的行和列了。这种方法非常方便，并且能够有效地过滤数据，为进一步的分析提供更为精细的数据。\n需要注意的是，在使用行索引和列索引时，需要确保它们的长度与数据框的行数和列数相同。如果长度不匹配，那么可能会导致代码出错或不能正常运行。因此，在使用行索引和列索引时，应该认真检查代码是否正确。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数据类型</span>"
    ]
  },
  {
    "objectID": "chapter/base_dataframe.html",
    "href": "chapter/base_dataframe.html",
    "title": "5  数据框(data.frame)",
    "section": "",
    "text": "5.1 代码示例\n# 创建一个数据框\nmy_data_frame &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# 查看数据框的前几行\nhead(my_data_frame)\n\n\n  \n\n\n# 查看数据框的后几行\ntail(my_data_frame)\n\n\n  \n\n\n# 查看数据框的数据类型和结构\nstr(my_data_frame)\n\n'data.frame':   3 obs. of  4 variables:\n $ id    : num  1 2 3\n $ name  : chr  \"Alice\" \"Bob\" \"Charlie\"\n $ age   : num  20 25 30\n $ gender: chr  \"F\" \"M\" \"M\"\n\n# 选择数据框中的某一列\nmy_data_frame$name\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n# 选择数据框中的某一行\nmy_data_frame[2, ]\n\n\n  \n\n\n# 选择数据框中的某一个值\nmy_data_frame[2, \"name\"]\n\n[1] \"Bob\"\n\n# 添加数据框列\nmy_data_frame$score &lt;- c(90, 85, 80)\n\n# 添加数据框行\nnew_row &lt;- data.frame(id = 4, name = \"David\", age = 32, gender = \"M\", score = 75)\nrbind(my_data_frame, new_row)\n\n\n  \n\n\n# 删除数据框列\nmy_data_frame$score &lt;- NULL\nmy_data_frame\n\n\n  \n\n\n# 删除数据框行\nmy_data_frame &lt;- my_data_frame[-2, ]\nmy_data_frame\n\n\n  \n\n\n# 排序数据框\nmy_data_frame &lt;- my_data_frame[order(my_data_frame$age), ]\nmy_data_frame\n\n\n  \n\n\n# 过滤数据框\nmy_data_frame[my_data_frame$age &gt;= 25, ]",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据框</span>"
    ]
  },
  {
    "objectID": "chapter/base_dataframe.html#行索引和列索引",
    "href": "chapter/base_dataframe.html#行索引和列索引",
    "title": "5  数据框(data.frame)",
    "section": "5.2 行索引和列索引",
    "text": "5.2 行索引和列索引\n在 R 语言中，数据框是一种二维数据表，其中每行表示一个观察值，每列表示一个变量。数据框的行索引和列索引是用来确定某一个特定的数据值的位置的方法。\n\n行索引: 数据框的行索引是从 1 开始的正整数，用来标识每一行。例如，在上面的代码中，第一行的行索引是 1，第二行的行索引是 2，以此类推。\n列索引: 数据框的列索引是列名，用来标识每一列。例如，在上面的代码中，第一列的列索引是 id，第二列的列索引是 name，以此类推。\n\n我们可以使用行索引和列索引来选择数据框中的某一个值。例如，如果我们想选择第二行第三列的值，可以使用 my_data_frame[2, \"age\"] 这样的语法。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据框</span>"
    ]
  },
  {
    "objectID": "chapter/base_dataframe.html#行索引和列索引的常见用法",
    "href": "chapter/base_dataframe.html#行索引和列索引的常见用法",
    "title": "5  数据框(data.frame)",
    "section": "5.3 行索引和列索引的常见用法",
    "text": "5.3 行索引和列索引的常见用法\n行索引和列索引在 R 语言中都非常常见，它们有许多用途。下面是一些常见的行索引和列索引的用法:\n\n选择数据框中的某一个值: 可以使用行索引和列索引选择数据框中的某一个值。例如，my_data_frame[2, \"name\"] 表示选择第二行第 name 列的值。\n添加数据框行: 可以使用行索引和 rbind() 函数添加新的行到数据框中。例如，my_data_frame &lt;- rbind(my_data_frame, new_row) 表示将新的行 new_row 添加到数据框 my_data_frame 的末尾。\n删除数据框行: 可以使用行索引删除数据框中的某一行。例如，my_data_frame &lt;- my_data_frame[-2, ] 表示删除数据框 my_data_frame 中的第二行。\n排序数据框: 可以使用行索引和 order() 函数对数据框进行排序。例如，my_data_frame &lt;- my_data_frame[order(my_data_frame$age), ] 表示根据 age 列对数据框 `",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据框</span>"
    ]
  },
  {
    "objectID": "chapter/base_dataframe.html#在r语言中的含义",
    "href": "chapter/base_dataframe.html#在r语言中的含义",
    "title": "5  数据框(data.frame)",
    "section": "5.4 []在R语言中的含义",
    "text": "5.4 []在R语言中的含义\n在 R 语言中，[] 符号用来表示数据结构的索引。具体来说，它表示选择数据结构中的某一部分。例如，如果 my_data 是一个数据框，那么 my_data[2, \"name\"] 表示选择数据框 my_data 中的第二行第 name 列的值。\n在 R 语言中，[] 符号还可以用来进行其他操作，例如排序、过滤、删除等。它还可以用来创建新的数据结构，例如向量、数组、数据框等。有关具体用法，您可以参考 R 语言的相关文档和教程。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据框</span>"
    ]
  },
  {
    "objectID": "chapter/base_dataframe.html#中缺省行索引和列索引的意义",
    "href": "chapter/base_dataframe.html#中缺省行索引和列索引的意义",
    "title": "5  数据框(data.frame)",
    "section": "5.5 []中缺省行索引和列索引的意义",
    "text": "5.5 []中缺省行索引和列索引的意义\n在 R 语言中，当 [] 符号中的行索引或列索引缺省时，它们会被自动填充为默认值。\n对于行索引，如果缺省，默认值是 1:n，其中 n 是数据框中的行数。例如，如果 my_data 是一个数据框，那么 my_data[, \"name\"] 和 my_data[1:n, \"name\"] 是等价的，都表示选择数据框 my_data 中的所有行的 name 列。\n对于列索引，如果缺省，默认值是所有列的名称。例如，如果 my_data 是一个数据框，那么 my_data[2, ] 和 my_data[2, colnames(my_data)] 是等价的，都表示选择数据框 my_data 中的第二行的所有列。\n通过使用缺省行索引和列索引，可以使代码更简洁易读。例如，我们可以使用 my_data[, \"name\"] 表示选择数据框 my_data 中的所有行的 name 列，而不用写出每一行的行索引。这样做既能够保证代码的正确性，又能够提高代码的可读性。\n当然，在实际使用中，还需要注意一些特殊情况。例如，如果缺省行索引和列索引可能导致代码不易理解，或者会与其他语法产生冲突，那么就需要明确指定行索引和列索引了。总之，在使用 [] 符号时，应该根据实际情况谨慎选择是否使用缺省行索引和列索引。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据框</span>"
    ]
  },
  {
    "objectID": "chapter/base_dataframe.html#行索引和列索引也可以填写布尔值吗",
    "href": "chapter/base_dataframe.html#行索引和列索引也可以填写布尔值吗",
    "title": "5  数据框(data.frame)",
    "section": "5.6 行索引和列索引也可以填写布尔值吗？",
    "text": "5.6 行索引和列索引也可以填写布尔值吗？\n是的，在 R 语言中，行索引和列索引也可以填写布尔值。这种用法可以用来选择数据框中满足某一条件的行和列。\n例如，如果 my_data 是一个数据框，那么 my_data[my_data$age &gt; 30, ] 表示选择数据框 my_data 中 age 列大于 30 的所有行。如果我们还想选择其中的 name 和 age 列，可以使用如下语句:\n\nmy_data &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\nmy_data[my_data$age &gt; 25, c(\"name\", \"age\")]\n\n\n  \n\n\n\n这样，我们就可以快速选择数据框中满足某一条件的行和列了。这种方法非常方便，并且能够有效地过滤数据，为进一步的分析提供更为精细的数据。\n需要注意的是，在使用行索引和列索引时，需要确保它们的长度与数据框的行数和列数相同。如果长度不匹配，那么可能会导致代码出错或不能正常运行。因此，在使用行索引和列索引时，应该认真检查代码是否正确。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据框</span>"
    ]
  },
  {
    "objectID": "chapter/base_package.html",
    "href": "chapter/base_package.html",
    "title": "6  安装包",
    "section": "",
    "text": "6.1 加载包\n安装包后，你需要使用library()函数来加载它们，以便在你的R会话中使用包中的函数。例如，要加载ggplot2包，可以执行以下命令：\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R包</span>"
    ]
  },
  {
    "objectID": "chapter/base_package.html#调用包里的函数",
    "href": "chapter/base_package.html#调用包里的函数",
    "title": "6  安装包",
    "section": "6.2 调用包里的函数",
    "text": "6.2 调用包里的函数\n在加载包之后，即可调用包里的函数。\n\ndata &lt;- data.frame(x = c(1, 2, 3, 4, 5), y = c(10, 15, 7, 20, 12))\n\n# 使用ggplot2创建散点图\nggplot(data, aes(x = x, y = y)) +\n  geom_point()+\n  theme_bw()",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R包</span>"
    ]
  },
  {
    "objectID": "chapter/base_package.html#不加载调用包中的函数",
    "href": "chapter/base_package.html#不加载调用包中的函数",
    "title": "6  安装包",
    "section": "6.3 不加载调用包中的函数",
    "text": "6.3 不加载调用包中的函数\n一般来说，调用包里的函数前要用library(包名)函数先加载包，随后调用函数。 一种不加载包，直接调用函数的方法如下：\n\ndplyr::select(mtcars,c('mpg','cyl'))\n\n\n  \n\n\n\n也即采用包名::函数名的方式直接调用某个包里的函数，这段代码没有加载dplyr包，而是用::的方式直接调用了dplyr包里的select函数,该函数的作用是选择数据框的部分列作为新的数据框返回，相当于取数据框的子集。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R包</span>"
    ]
  },
  {
    "objectID": "chapter/base_package.html#卸载包",
    "href": "chapter/base_package.html#卸载包",
    "title": "6  安装包",
    "section": "6.4 卸载包",
    "text": "6.4 卸载包\n要卸载一个已安装的包，你可以使用remove.packages()函数。以下是卸载包的步骤：\n\n# 卸载包\nremove.packages(\"ggplot2\")",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R包</span>"
    ]
  },
  {
    "objectID": "chapter/base_package.html#更新包",
    "href": "chapter/base_package.html#更新包",
    "title": "6  安装包",
    "section": "6.5 更新包",
    "text": "6.5 更新包\n要更新已安装的包，你可以使用update.packages()函数。以下是更新包的步骤：\n\n如果你希望更新所有可用的包，可以在update.packages()函数中设置ask参数为FALSE，然后运行函数。\n\n\n# 更新所有可用的包（不询问）\nupdate.packages(ask = FALSE)\n\n\n如果你只想更新特定的包，可以提供包名称的向量作为参数。例如，要更新”ggplot2”和”dplyr”包：\n\n\n# 更新特定的包\nupdate.packages(ask = FALSE, lib.loc = .libPaths(), oldPkgs = c(\"ggplot2\", \"dplyr\"))\n\n上述方法允许你卸载和更新R包，确保你的R环境中始终使用最新版本的包。在数据分析和编程中，定期更新包非常重要，因为更新通常包含了错误修复和新功能。\n\n6.5.1 查看已安装的包\n你可以使用installed.packages()函数来查看已经安装的包列表：\n\ninstalled_packages &lt;- as.data.frame(installed.packages())\ninstalled_packages\n\n\n  \n\n\n\n这将显示一些关于已安装包的基本信息，如包名、版本等。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R包</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html",
    "href": "chapter/base_function.html",
    "title": "7  什么是函数",
    "section": "",
    "text": "7.1 函数的构成要素\n一个函数通常由以下几个要素构成：\n这些要素构成了一个完整的函数，它们各自扮演着不同的角色，协同工作以完成函数的目标。\n例如，如果你要定义一个函数来计算数据集的平均值，那么可以这样写：\nmean &lt;- function(x) {\n  sum = sum(x)\n  n = length(x)\n  return(sum / n)\n}\n这个函数的名称是mean，它有一个参数x，函数体中包含了计算平均值的代码，最后会返回计算结果。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html#函数的构成要素",
    "href": "chapter/base_function.html#函数的构成要素",
    "title": "7  什么是函数",
    "section": "",
    "text": "函数名：这是函数的标识符，用于调用函数。\n参数（或形参）：这是函数的输入，函数在执行时需要根据参数进行计算。\n函数体：这是函数执行的代码块，包含了函数所要完成的操作。\n返回值（或实参）：这是函数的输出，函数执行完成后会返回一个值。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html#r语言函数的分类",
    "href": "chapter/base_function.html#r语言函数的分类",
    "title": "7  什么是函数",
    "section": "7.2 R语言函数的分类",
    "text": "7.2 R语言函数的分类\nR语言中的函数可以分为几大类：\n\n基础包中的函数：这些函数是R语言的内置函数，包括常见的数学运算、统计分析、数据处理和可视化等操作。例如，mean()函数可以计算数据集的平均值，plot()函数可以绘制数据的图形。\n包中的函数：R语言中有许多第三方包，这些包提供了额外的函数和功能。例如，ggplot2包提供了用于绘制复杂图形的函数，dplyr包提供了高效的数据处理函数。要使用这些函数，需要先安装并加载相应的包。\n用户自定义函数：这些函数是用户自己定义的，用于执行特定的任务。例如，如果你有一个复杂的分析流程，可以将这个流程封装成一个函数，以便在需要时调用。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html#函数示例",
    "href": "chapter/base_function.html#函数示例",
    "title": "7  什么是函数",
    "section": "7.3 函数示例",
    "text": "7.3 函数示例\n如下代码定义了一个名叫f1的函数，作用是打印两个数的和，返回两个数的差。\n\nf1 &lt;- function(x, y) {\n  print(x + y)\n  return (x - y)\n}\n\n在这个例子中，我们使用print()函数打印出两个数的和，并使用return()函数返回两个数的差。\n你可以用以下代码来调用这个函数：\n\nresult &lt;- f1(3, 5)\n\n[1] 8\n\nresult\n\n[1] -2\n\n\n在这里，我们将3和5作为参数传递给函数f1()，然后函数会先打印出两个数的和，再返回两个数的差。执行完这个代码后，变量result的值为-2。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html#定义函数可以不写return吗",
    "href": "chapter/base_function.html#定义函数可以不写return吗",
    "title": "7  什么是函数",
    "section": "7.4 定义函数可以不写return吗？",
    "text": "7.4 定义函数可以不写return吗？\n是的，在R语言中，定义函数时可以不写return()函数。如果函数没有使用return()函数指定返回值，则函数会自动返回最后一个计算结果作为返回值。例如，假设你有一个名为add()的函数，它可以接收两个数字，并返回它们的和。你可以用以下代码定义这个函数：\n\nadd &lt;- function(x, y) {\n x + y\n}\n\n在这个例子中，我们省略了return()函数，直接将两个数的和作为函数的返回值。你可以用以下代码来调用这个函数：\n\nresult &lt;- add(3, 5)\nresult\n\n[1] 8\n\n\n在这里，我们将3和5作为参数传递给函数add()，函数会自动返回它们的和。执行完这个代码后，变量result的值为8。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html#函数的调用",
    "href": "chapter/base_function.html#函数的调用",
    "title": "7  什么是函数",
    "section": "7.5 函数的调用",
    "text": "7.5 函数的调用\n在R语言中，可以通过使用函数名称来调用函数。例如，要调用mean()函数，可以这样写：\n\nmean(1:10)\n\n[1] 5.5\n\n\n当然，你也可以在调用函数时向函数传递额外的参数。例如，要计算一个数据集的中位数，可以这样写：\n\nmedian(c(1:10,NA), na.rm = TRUE)\n\n[1] 5.5\n\n\n在这个例子中，我们向median()函数传递了一个参数，即na.rm = TRUE。这个参数告诉R语言在计算中位数时忽略数据集中的缺失值。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_function.html#写一个计算偏度和峰度的函数",
    "href": "chapter/base_function.html#写一个计算偏度和峰度的函数",
    "title": "7  什么是函数",
    "section": "7.6 写一个计算偏度和峰度的函数",
    "text": "7.6 写一个计算偏度和峰度的函数\n下面是一个计算偏度和峰度的函数：\n\nskew_kurtosis &lt;- function(x) {\n\n  skew = sum((x - mean(x))^3) / (length(x) * sd(x)^3)\n\n  kurtosis = sum((x - mean(x))^4) / (length(x) * sd(x)^4) - 3\n\n  return(c(skew, kurtosis))\n\n}\n\n这个函数接收一个向量x作为参数，并计算x的偏度和峰度。计算完成后，会将结果放在一个向量中返回。\n例如，要计算一个数据集的偏度和峰度，可以这样写：\n\n  skew_kurtosis(1:10)\n\n[1]  0.000000 -1.561636\n\n\n这个函数会计算data的偏度和峰度，并将结果作为向量返回。",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_common_function.html",
    "href": "chapter/base_common_function.html",
    "title": "8  常用函数",
    "section": "",
    "text": "8.1 常数\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\nmonth.name\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>常用函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_common_function.html#基础",
    "href": "chapter/base_common_function.html#基础",
    "title": "8  常用函数",
    "section": "8.2 基础",
    "text": "8.2 基础\n\nc(1,2,3,4) # 拼接\n\n[1] 1 2 3 4\n\nseq(0,1,by=0.25) #序列\n\n[1] 0.00 0.25 0.50 0.75 1.00\n\nlength(1:10)\n\n[1] 10\n\nrep(1:2,each=5)\n\n [1] 1 1 1 1 1 2 2 2 2 2\n\nrep(1:2,time=5)\n\n [1] 1 2 1 2 1 2 1 2 1 2\n\nhead(1:10)\n\n[1] 1 2 3 4 5 6\n\ntail(1:10)\n\n[1]  5  6  7  8  9 10\n\nis.na(c(1:10,NA))\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n\nclass(mtcars)\n\n[1] \"data.frame\"\n\ndim(mtcars)\n\n[1] 32 11\n\nnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n\npaste(2011,1:5,01,sep='-')\n\n[1] \"2011-1-1\" \"2011-2-1\" \"2011-3-1\" \"2011-4-1\" \"2011-5-1\"\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>常用函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_common_function.html#统计",
    "href": "chapter/base_common_function.html#统计",
    "title": "8  常用函数",
    "section": "8.3 统计",
    "text": "8.3 统计\n\n\n#统计\nx=rnorm(1000) #随机数\nhead(x)\n\n[1] -1.20005554  0.39673153 -0.03092921  0.90827612  0.70780874  1.17401448\n\nmin(x)\n\n[1] -3.528692\n\nmax(x)\n\n[1] 3.0422\n\nrange(x)\n\n[1] -3.528692  3.042200\n\nmean(x)\n\n[1] 0.01667074\n\nmedian(x)\n\n[1] 0.04793839\n\nsd(x)\n\n[1] 1.008562\n\nvar(x)\n\n[1] 1.017197\n\nquantile(x)\n\n         0%         25%         50%         75%        100% \n-3.52869250 -0.60665337  0.04793839  0.70892757  3.04219967 \n\nfivenum(x)\n\n[1] -3.52869250 -0.60688274  0.04793839  0.70893170  3.04219967\n\ntable(mtcars$cyl)\n\n\n 4  6  8 \n11  7 14 \n\ntable(mtcars$cyl,mtcars$cyl)\n\n   \n     4  6  8\n  4 11  0  0\n  6  0  7  0\n  8  0  0 14",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>常用函数</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_io.html",
    "href": "chapter/base_data_io.html",
    "title": "9  最佳推荐-rio包",
    "section": "",
    "text": "9.1 导出\nexport(mtcars,'data/mtcars.csv')\nexport(mtcars,'data/mtcars.rds')\nexport(mtcars,'data/mtcars.xlsx')\nexport(mtcars,'data/mtcars.sav')\nexport(mtcars,'data/mtcars.sas7bdat')",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据读写</span>"
    ]
  },
  {
    "objectID": "chapter/base_data_io.html#导出",
    "href": "chapter/base_data_io.html#导出",
    "title": "9  最佳推荐-rio包",
    "section": "",
    "text": "9.1.1 导入\n\nimport('data/mtcars.csv')\n\n\n  \n\n\nimport('data/mtcars.rds')\n\n\n  \n\n\nimport('data/mtcars.xlsx')\n\n\n  \n\n\nimport('data/mtcars.sav')\n\n\n  \n\n\nimport('data/mtcars.sav')",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据读写</span>"
    ]
  },
  {
    "objectID": "chapter/base_vector.html",
    "href": "chapter/base_vector.html",
    "title": "10  向量化",
    "section": "",
    "text": "10.1 对应元素运算\nx&lt;-1:10\ny&lt;-10:1\nx+y\n\n [1] 11 11 11 11 11 11 11 11 11 11",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>向量化</span>"
    ]
  },
  {
    "objectID": "chapter/base_vector.html#循环补足",
    "href": "chapter/base_vector.html#循环补足",
    "title": "10  向量化",
    "section": "10.2 循环补足",
    "text": "10.2 循环补足\n\nx&lt;-rep(100,time=10)\nx + 1\n\n [1] 101 101 101 101 101 101 101 101 101 101\n\nx + 1:2\n\n [1] 101 102 101 102 101 102 101 102 101 102\n\nx + 1:3\n\nWarning in x + 1:3: longer object length is not a multiple of shorter object\nlength\n\n\n [1] 101 102 103 101 102 103 101 102 103 101\n\nx + 1:4\n\nWarning in x + 1:4: longer object length is not a multiple of shorter object\nlength\n\n\n [1] 101 102 103 104 101 102 103 104 101 102\n\nx + 1:5\n\n [1] 101 102 103 104 105 101 102 103 104 105\n\n\n\ndata&lt;-data.frame(x=1:6)\ndata\n\n\n  \n\n\ndata$y=c('A','B','C')\ndata\n\n\n  \n\n\n# data$z=1:5 报错，因为6不能被5整除",
    "crumbs": [
      "基础篇",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>向量化</span>"
    ]
  },
  {
    "objectID": "chapter/clean_tidyverse.html",
    "href": "chapter/clean_tidyverse.html",
    "title": "R语言入门指南",
    "section": "",
    "text": "Tidyverse 是 R 语言中一组用于数据分析和数据处理的包的集合，它们共享一致的设计理念和编程风格，可以极大地简化数据科学工作流程。以下是 Tidyverse 包的主要构成和它们的主要功能：\n\nggplot2：ggplot2 是一个用于数据可视化的包，它允许用户通过图层的方式构建各种复杂的图表。ggplot2 提供了高度定制化的绘图功能，使你能够创建各种类型的图表，包括散点图、直方图、箱线图等。\ndplyr：dplyr 提供了一组用于数据操作和转换的函数，包括数据筛选、排序、分组、汇总和连接等操作。它的函数非常直观，使得数据处理任务变得更加简单和可读。\ntidyr：tidyr 包用于数据的整理和重塑，它包括了函数如 pivot_wider() 和 pivot_longer()，用于在宽格式和长格式之间转换数据。\nreadr：readr 包含了快速和高效的数据导入函数，用于读取和解析各种数据格式，例如 CSV、TSV 和固定宽度的文本文件。\npurrr：purrr 提供了函数式编程的工具，用于迭代和操作列表、向量和数据框等对象。它适用于重复性任务和自定义函数的应用。\nstringr：stringr 包含了字符串处理的函数，使得处理文本数据更加简单和一致，例如字符串的分割、合并、替换等操作。\nforcats：forcats 专注于因子变量的处理，提供了更多的因子操作函数，以帮助管理分类数据。\ntibble：tibble 是一个用于创建和操作数据框的包，它提供了比基本数据框更多的功能，包括更好的数据展示和列名处理。\nlubridate：lubridate 用于处理日期和时间数据，提供了简单而强大的函数，用于日期和时间的计算和格式化。\n\n这些包的共同设计理念是”整洁数据”（tidy data），这种数据结构具有清晰的规范，易于操作和分析。通过使用 Tidyverse，数据科学家可以更加高效地进行数据清洗、分析和可视化，同时代码也更易于理解和维护。这些包可以通过安装和加载来使用，通常使用 library() 函数来加载它们。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>tidyverse</span>"
    ]
  },
  {
    "objectID": "chapter/clean_pipe.html",
    "href": "chapter/clean_pipe.html",
    "title": "12  管道符-%>%",
    "section": "",
    "text": "12.0.1 常见用法\n\nlibrary(tidyverse)\n\nsub&lt;-function(x,y){ #自定义求差函数\n  x-y\n}\n\nsub(1,2)\n\n[1] -1\n\nsub(2,3)\n\n[1] -1\n\n\n\n#借用管道符调用\n1 %&gt;% sub(2)\n\n[1] -1\n\n2 %&gt;% sub(3)\n\n[1] -1\n\n#连续调用\n3 %&gt;% sub(1) %&gt;% sub(2)\n\n[1] 0\n\nmean(1:10)\n\n[1] 5.5\n\n1:10 %&gt;% mean() %&gt;% class()\n\n[1] \"numeric\"\n\n\n\n\n12.0.2 指定位置\n\n1 %&gt;% sub(2,.)\n\n[1] 1\n\n1 %&gt;% sub(.,2)\n\n[1] -1\n\n1 %&gt;% sub(.,.)\n\n[1] 0\n\nmean(c(1:10,NA))\n\n[1] NA\n\nmean(c(1:10,NA),na.rm=TRUE)\n\n[1] 5.5\n\nTRUE %&gt;% mean(c(1:10,NA),na.rm=.)\n\n[1] 5.5\n\n\n\n\n12.0.3 实战应用\n管道符的优势即是连续调用\n\nmtcars %&gt;%\n  filter(cyl==4) %&gt;%\n  mutate(mpg2=mpg+100) %&gt;%\n  select(cyl,mpg,mpg2) %&gt;%\n  head()\n\n\n  \n\n\n\n等价于\n\nhead(select(mutate(filter(mtcars,cyl==4),mpg2=mpg+100),cyl,mpg,mpg2))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>管道符%>%</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html",
    "href": "chapter/clean_dplyr.html",
    "title": "13  介绍",
    "section": "",
    "text": "13.1 示例数据\nlibrary(dplyr)\ndata&lt;-data.frame(x=-2:3,y=1:6,a=rep(c('A','B'),each=3))\ndata",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#select",
    "href": "chapter/clean_dplyr.html#select",
    "title": "13  介绍",
    "section": "13.2 select()",
    "text": "13.2 select()\nselect()是dplyr包中的一个函数，它用于选择数据框中的特定列。例如，假设你有一个名为data的数据框，其中包含多列，你可以用以下代码选择列x和列y：\n\nselect(data, x, y)\n\n\n  \n\n\n\n在这个例子中，select()函数会返回一个新的数据框，其中只包含原来数据框中的列x和列y。你也可以使用通配符来选择多个列。例如：\n\nselect(data, starts_with(\"x\"))\n\n\n  \n\n\n\n这里的starts_with()函数会匹配所有以x开头的列名，例如x1、x2等，然后select()函数会返回一个新的数据框，其中包含原数据框中所有以x开头的列。\n除了选择列，你还可以用select()函数来排除列。例如：\n\nselect(data, -x)\n\n\n  \n\n\n\n这里，我们使用了负号（-）来排除列x，select()函数会返回一个新的数据框，其中包含原数据框中除列x以外的所有列。\n你也可以使用类似的方式来排除多个列，例如：\n\nselect(data, -starts_with(\"x\"))\n\n\n  \n\n\n\n这里，我们使用了starts_with()函数来匹配所有以x开头的列名，然后用负号排除这些列。select()函数会返回一个新的数据框，其中包含原数据框中除了以x开头的列以外的所有列。\n除了使用函数来选择或排除列，你还可以使用类似于SQL中的语法来指定要选择或排除的列。例如：\n\nselect(data, x, y, -a)\n\n\n  \n\n\n\n这里，我们指定了要选择列x和列y，并使用负号排除列a。select()函数会返回一个新的数据框，其中包含原数据框中的列x、列y，除列a以外的所有列。\n\n13.2.1 选择器函数有哪些\n在 tidyverse 语法中，有多种选择器函数可以用来选择数据框中的特定列。这些选择器函数主要有如下几种:\n\nstarts_with()：选择名称以某个字符串开头的列。\nends_with()：选择名称以某个字符串结尾的列。\ncontains()：选择名称中包含某个字符串的列。\nmatches()：选择名称与某个正则表达式相匹配的列。\none_of()：选择名称在指定列表中出现过的列。\neverything()：选择所有列。\n\n\nmy_data&lt;-data.frame(age=1:3) %&gt;%\n  mutate(age1=age,age2=age,Age1=age,new_age=age,new_age_old=age,\n         chr_age=as.character(age))\nmy_data\n\n\n  \n\n\n\n例如，如果您想要选择 my_data 数据框中名称以 age 开头的列，可以使用如下语句:\n\nmy_data %&gt;% select(starts_with(\"age\"))\n\n\n  \n\n\n\n这条语句的意思是，在 my_data 数据框中选择名称以 age 开头的列，并将结果保存到变量 my_data_selected 中。\n如果您想要选择 my_data 数据框中名称以 age 结尾的列。\n如果您想要选择 my_data 数据框中名称以 age 结尾的列，可以使用如下语句:\n\nmy_data %&gt;% select(ends_with(\"age\"))\n\n\n  \n\n\n\n如果您想要选择 my_data 数据框中名称中包含 age 的列，可以使用如下语句:\n\nmy_data %&gt;% select(contains(\"age\"))\n\n\n  \n\n\n\n如果您想要选择 my_data 数据框中名称与正则表达式 \"a.e\" 相匹配的列，可以使用如下语句:\n\nmy_data %&gt;% select(matches(\"a.e\"))\n\n\n  \n\n\n\n如果您想要选择 my_data 数据框中名称在列表 c(\"age\", \"height\") 中出现过的列，可以使用如下语句:\n\nmy_data %&gt;% select(one_of(c(\"age\", \"height\")))\n\nWarning: Unknown columns: `height`\n\n\n\n  \n\n\n\n如果您想要选择 my_data 数据框中的所有列，可以使用如下语句:\n\nmy_data %&gt;% select(everything())\n\n\n  \n\n\n\n\n\n13.2.2 其他的选择器函数\n除了以上提到的选择器函数，tidyverse 语法中还有一些其他选择器函数可以用来选择数据框中的特定列。例如，还有以下几种常用的选择器函数:\n\nnum_range()：选择名称在指定数字范围内的列。\nwhere()：选择满足某个条件的列。\n\n例如，如果您想要选择 my_data 数据框中名称在数字范围 [1,5] 内的列，可以使用如下语句:\n\nmy_data %&gt;% select(num_range(1, 5))\n\n\n  \n\n\nmy_data %&gt;% select(where(is.numeric))\n\n\n  \n\n\nmy_data %&gt;% select(where(is.character))\n\n\n  \n\n\n\n\n\n13.2.3 match选择器函数中的正则表达式\n在 match() 选择器函数中，您可以使用正则表达式来匹配列名。正则表达式的语法与 R 语言的其他用法相同，详细内容可以参考 R 语言的官方文档。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#mutate",
    "href": "chapter/clean_dplyr.html#mutate",
    "title": "13  介绍",
    "section": "13.3 mutate()",
    "text": "13.3 mutate()\nmutate()是dplyr包中的一个函数，用于创建新的计算变量。例如，假设你有一个名为data的数据框，其中包含一列名为x和一列名为y，你可以用以下代码创建一个新的列z，其值为x和y的和：\n\nmutate(data, z = x + y)\n\n\n  \n\n\n\n你可以用类似的方式创建其他任何计算变量。例如，你可以根据条件创建一个分类变量：\n\nmutate(data, group = ifelse(x &gt; 0, \"positive\", \"negative\"))\n\n\n  \n\n\n\n另外，你也可以在mutate()函数中使用其他函数，例如聚合函数或统计函数，来对原数据进行处理。例如，你可以计算每个x值的均值和标准差：\n\nmutate(data,\n  x_mean = mean(x),\n  x_sd = sd(x)\n)\n\n\n  \n\n\n\n你还可以使用group_by()函数来根据指定的列对数据进行分组，然后在每组中应用mutate()函数，以便为每个组分别计算新的变量。例如：\n\ngroup_by(data, a) %&gt;%\n  mutate(\n    x_mean = mean(x),\n    x_sd = sd(x)\n  )",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#filter",
    "href": "chapter/clean_dplyr.html#filter",
    "title": "13  介绍",
    "section": "13.4 filter()",
    "text": "13.4 filter()\nfilter()是dplyr包中的一个函数，它用于根据指定的条件选择数据框中的行。例如，假设你有一个名为data的数据框，其中包含多行多列，你可以用以下代码选择值大于0的行：\n\nfilter(data, x &gt; 0)\n\n\n  \n\n\n\n在这个例子中，filter()函数会返回一个新的数据框，其中只包含原数据框中值大于0的行。你也可以使用多个条件来进行筛选。例如：\n\nfilter(data, x &gt; 0, y &lt; 5)\n\n\n  \n\n\n\n这里，filter()函数会返回一个新的数据框，其中只包含原数据框中值大于0且值小于5的行。\n除了简单的条件判断，你还可以在filter()函数中使用复杂的逻辑表达式来进行筛选。例如：\n\nfilter(data, x &gt; 0 & y &lt; 5 | a == 'B')\n\n\n  \n\n\n\n这里，我们使用了与（&）、或（|）以及等于（==）符号来构造复杂的逻辑表达式，filter()函数会返回一个新的数据框，其中只包含原数据框中符合",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#group_by",
    "href": "chapter/clean_dplyr.html#group_by",
    "title": "13  介绍",
    "section": "13.5 group_by()",
    "text": "13.5 group_by()\n\nmy_data&lt;-data.frame(\n  id=1:6,\n  age=3:4,\n  sex=rep(c('Female','Male'),each=3),\n  los=runif(6,3,10) %&gt;% round()\n)\nmy_data\n\n\n  \n\n\n\ngroup_by() 是 dplyr包中的一个函数，它能够将数据按照指定的条件进行分组。通常，我们使用 group_by() 函数将数据按照某个变量的值进行分组，然后再对每个分组进行进一步的操作。\n例如，假设我们有一个数据框 my_data，如果我们想要将数据框 my_data 按照 age 变量的值进行分组，可以使用如下语句:\n\nmy_data_grouped &lt;- group_by(my_data, age)\n\n这条语句的意思是，使用 group_by() 函数将数据框 my_data 按照 age 变量的值进行分组，并将结果保存到变量 my_data_grouped 中。\n接下来，我们可以对每个分组进行进一步的操作。例如，如果我们想要计算每个分组中 los 变量的平均值，可以使用 summarise() 函数来实现:\n\nsummarise(\n  my_data_grouped, \n  mean_nlos = mean(los))\n\n\n  \n\n\n\n\n13.5.1 多级分组\n当然，您也可以使用 group_by() 函数进行多级分组。例如，如果您想要将数据框 my_data 按照 age 和 sex 两个变量的值进行多级分组，可以使用如下语句:\n\nmy_data %&gt;%\n  group_by(age, sex) %&gt;%\n  summarise(mean=mean(los),median=median(los))\n\n`summarise()` has grouped output by 'age'. You can override using the `.groups`\nargument.\n\n\n\n  \n\n\n\n\n\n13.5.2 重新分组\n\nmy_data %&gt;%\n  group_by(age) %&gt;%\n  group_by(sex) %&gt;% #重新分组\n  summarise(mean=mean(los),median=median(los))\n\n\n  \n\n\n\n\n\n13.5.3 取消分组\n如果您想要取消分组，可以使用 ungroup() 函数。例如，假设您已经将数据框 my_data 按照 age 变量的值进行分组，并将结果保存到变量 my_data_grouped 中，如果您想要取消分组，可以使用如下语句:\n\nmy_data %&gt;%\n  group_by(age) %&gt;%\n  ungroup() %&gt;%\n  summarise(mean=mean(los),median=median(los))\n\n\n  \n\n\n\n取消分组后，数据框会恢复到未分组的状态。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#summarise",
    "href": "chapter/clean_dplyr.html#summarise",
    "title": "13  介绍",
    "section": "13.6 summarise()",
    "text": "13.6 summarise()\nsummarise()是dplyr包中的一个函数，它用于对数据框进行汇总。例如，假设你有一个名为data的数据框，其中包含多行多列，你可以用以下代码计算每个组的均值：\n\ngroup_by(my_data, sex) %&gt;%\n  summarise(mean = mean(los))\n\n\n  \n\n\n\n在这个例子中，我们首先使用group_by()函数将数据框按照列sex进行分组，然后使用summarise()函数计算每个组的均值。summarise()函数会返回一个新的数据框，其中包含每个组的均值以及对应的组名。\n除了计算均值，你还可以使用summarise()函数计算其他统计量，例如求和、求最大值求最小值等。例如：\n\ngroup_by(my_data, sex) %&gt;%\n  summarise(sum = sum(los),\n            max = max(los),\n            min = min(los))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#distinct",
    "href": "chapter/clean_dplyr.html#distinct",
    "title": "13  介绍",
    "section": "13.7 distinct()",
    "text": "13.7 distinct()\ndistinct() 函数是 tidyverse 包中的一个函数，用于选择指定数据框中不同的行。例如，如果您想要从 my_data 数据框中选择出不同的行，可以使用如下语句:\n\nmy_data %&gt;% distinct(sex,.keep_all = T)\n\n\n  \n\n\n\n这条语句的意思是，在 my_data 数据框中选择出不同的行，并将结果保存到变量 my_data_distinct 中。\n除了上述语句，您还可以使用 distinct() 函数指定选择哪些列来检查行的唯一性。例如，如果您想要仅以 age 列为依据来选择不同的行，可以使用如下语句:\n\nmy_data %&gt;% distinct(age)\n\n这条语句的意思是，在 my_data 数据框中选择出不同的行，并仅以 age 列为依据来检查行的唯一性。由于这条语句只检查了 age 列，所以如果两行中 age 列的值相同，那么这两行都会被认为是重复的，只会保留一行。最终的结果会被保存到变量 my_data_distinct 中。\n另外，您还可以使用 distinct() 函数中的 .keep_all 参数来指定是否保留所有列。例如，如果您想要保留所有列，可以使用如下语句:\n\nmy_data %&gt;% distinct(sex,age,.keep_all = TRUE)\n\n\n  \n\n\n\n这条语句的意思是，在 my_data 数据框中选择出不同的行，并保留所有列。由于这条语句指定了 .keep_all = TRUE 参数，所以所有的列都会被保留。最终的结果会被保存到变量 my_data_distinct 中。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_dplyr.html#arrange",
    "href": "chapter/clean_dplyr.html#arrange",
    "title": "13  介绍",
    "section": "13.8 arrange()",
    "text": "13.8 arrange()\n\n13.8.1 升序\narrange() 函数是 tidyverse 包中的一个函数，用于对指定数据框中的行进行排序。例如，如果您想要对 my_data 数据框中的行按照 age 列的值进行排序，可以使用如下语句:\n\nmy_data %&gt;% arrange(id)\n\n\n  \n\n\n\n\n\n13.8.2 降序\n除了上述语句，您还可以使用 arrange() 函数中的 desc() 函数来指定是否按照降序进行排序。例如，如果您想要按照降序排序，可以使用如下语句:\n\nmy_data %&gt;% \n  arrange(desc(id))\n\n\n  \n\n\n\n\n\n13.8.3 多个变量\n\nmy_data %&gt;%\n  arrange(sex,desc(id))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>必会操作</span>"
    ]
  },
  {
    "objectID": "chapter/clean_date.html",
    "href": "chapter/clean_date.html",
    "title": "14  最佳推荐-lubridate包",
    "section": "",
    "text": "14.1 基本用法",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>日期处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_date.html#基本用法",
    "href": "chapter/clean_date.html#基本用法",
    "title": "14  最佳推荐-lubridate包",
    "section": "",
    "text": "14.1.1 字符串转日期\n\nymd('20221221','2023-12-21','2023/2/21','20/2/21')\n\n[1] \"2022-12-21\" \"2023-12-21\" \"2023-02-21\" \"2020-02-21\"\n\nmdy('12212022','12212023','12/21/2023','2/21/20')\n\n[1] \"2022-12-21\" \"2023-12-21\" \"2023-12-21\" \"2020-02-21\"\n\n\n\n\n14.1.2 时间间隔\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/years(1)\n\n[1] 1\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/months(3)\n\n[1] 4\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/weeks(1)\n\n[1] 52.14286\n\ninterval(ymd('2021-12-21'),ymd('20221221'))/days(1)\n\n[1] 365\n\n\n\n\n14.1.3 年月提取\n\nymd('2021-12-21') %&gt;% year()\n\n[1] 2021\n\nymd('2021-12-21') %&gt;% month()\n\n[1] 12\n\nymd('2021-12-21') %&gt;% week()\n\n[1] 51\n\nymd('2021-12-21') %&gt;% day()\n\n[1] 21\n\n\n\n\n14.1.4 日期运算\n\nymd('2021-12-21')+days(365)\n\n[1] \"2022-12-21\"\n\nymd('2021-12-21')+weeks(52)\n\n[1] \"2022-12-20\"\n\nymd('2021-12-21')+months(12)\n\n[1] \"2022-12-21\"\n\nymd('2021-12-21')+years(1)\n\n[1] \"2022-12-21\"",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>日期处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_date.html#实战应用",
    "href": "chapter/clean_date.html#实战应用",
    "title": "14  最佳推荐-lubridate包",
    "section": "14.2 实战应用",
    "text": "14.2 实战应用\n\n14.2.1 年龄计算\nHIS系统住院数据模拟，计算就诊年月周，就诊年龄，住院天数\n\ndata&lt;-data.frame(id=1:6,birth_date=paste(2021,1,1:6,sep='-'),\n                 admit_date=paste(2023,5:10,6:1,sep='-'),\n                 disch_date=paste(2023,5:10,6:11,sep='-'))\ndata\n\n\n  \n\n\n\n\ndata %&gt;%\n  mutate(birth_date=ymd(birth_date),\n         admit_date=ymd(admit_date),\n         disch_date=ymd(disch_date),\n         age=interval(birth_date,admit_date)/years(1),\n         los=interval(admit_date,disch_date)/days(1)) %&gt;%\n  mutate(year=year(admit_date),\n         month=month(admit_date),\n         week=week(admit_date))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>日期处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html",
    "href": "chapter/clean_string.html",
    "title": "15  介绍",
    "section": "",
    "text": "15.1 str_length()\nstr_length() 函数是 stringr 包中的一个函数，用于计算字符串的长度（即字符串中字符的数量）。例如，下面的代码使用 str_length() 函数来计算字符串的长度：\n# 加载 stringr 包\nlibrary(stringr)\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_length() 函数来计算字符串的长度\nmy_string_length &lt;- str_length(my_string)\n\n# 输出结果\nprint(my_string_length)\n\n[1] 13\n这表明，字符串 “Hello, world!” 的长度为 13（包含 13 个字符）。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_replace",
    "href": "chapter/clean_string.html#str_replace",
    "title": "15  介绍",
    "section": "15.2 str_replace()",
    "text": "15.2 str_replace()\nstr_replace() 函数是 stringr 包中的一个函数，用于替换字符串中的某个部分。该函数的语法格式如下：\n\nstr_replace(string, pattern, replacement)\n\n其中，string 是要进行替换操作的字符串，pattern是要替换的子串，replacement 是用来替换的新子串。例如，下面的代码使用 str_replace() 函数来替换字符串中的某个部分：\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_replace() 函数来替换字符串中的某个部分\nmy_string_replaced &lt;- str_replace(my_string, \"world\", \"R\")\n\n# 输出结果\nprint(my_string_replaced)\n\n[1] \"Hello, R!\"",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_detect",
    "href": "chapter/clean_string.html#str_detect",
    "title": "15  介绍",
    "section": "15.3 str_detect()",
    "text": "15.3 str_detect()\nstr_detect() 函数是 stringr 包中的一个函数，用于检测字符串中是否包含某个指定的子串。该函数的语法格式如下：\n\nstr_detect(string, pattern)\n\n其中，string 是要检测的字符串，pattern是要查找的子串。例如，下面的代码使用 str_detect() 函数来检测字符串中是否包含某个指定的子串：\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_detect() 函数来检测字符串中是否包含某个指定的子串\nis_substring_present &lt;- str_detect(my_string, \"world\")\n\n# 输出结果\nprint(is_substring_present)\n\n[1] TRUE\n\n\n这表明，字符串 “Hello, world!” 中包含了子串 “world”。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_count",
    "href": "chapter/clean_string.html#str_count",
    "title": "15  介绍",
    "section": "15.4 str_count()",
    "text": "15.4 str_count()\nstr_count() 函数是 stringr 包中的一个函数，用于统计字符串中某个子串的出现次数。该函数的语法格式如下：\n\nstr_count(string, pattern)\n\n其中，string 是要检测的字符串，pattern 是要查找的子串。例如，下面的代码使用 str_count() 函数来统计字符串中某个子串的出现次数：\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_count() 函数来统计字符串中某个子串的出现次数\nmy_string_count &lt;- str_count(my_string, \"l\")\n\n# 输出结果\nprint(my_string_count)\n\n[1] 3\n\n\n这表明，字符串 “Hello, world!” 中子串 “l” 出现了 3 次。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_split",
    "href": "chapter/clean_string.html#str_split",
    "title": "15  介绍",
    "section": "15.5 str_split()",
    "text": "15.5 str_split()\nstr_split() 函数是 stringr 包中的一个函数，用于将字符串按照指定的分隔符进行分割，并返回一个字符串数组。该函数的语法格式如下：\n\nstr_split(string, pattern)\n\n其中，string 是要分割的字符串，pattern 是用来分割字符串的分隔符。例如，下面的代码使用 str_split() 函数来将字符串按照逗号进行分割：\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_split() 函数将字符串按照逗号进行分割\nmy_string_split &lt;- str_split(my_string, \",\")\n\n# 输出结果\nprint(my_string_split)\n\n[[1]]\n[1] \"Hello\"   \" world!\"\n\n\n这表明，字符串 “Hello, world!” 被按照逗号进行分割后，得到了包含两个元素的字符串数组，分别为 “Hello” 和 ” world!“。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_c",
    "href": "chapter/clean_string.html#str_c",
    "title": "15  介绍",
    "section": "15.6 str_c()",
    "text": "15.6 str_c()\nstr_c() 函数是 stringr 包中的一个函数，用于将多个字符串拼接成一个新的字符串。该函数的语法格式如下：\n\nstr_c(..., sep = \"\")\n\n其中，... 表示可以传入任意多个字符串，sep 参数表示分隔符，即拼接后的字符串中，每两个字符串之间的分隔符。例如，下面的代码使用 str_c() 函数来将多个字符串拼接成一个新的字符串：\n\n# 使用 str_c() 函数将多个字符串拼接成一个新的字符串\nmy_string &lt;- str_c(\"Hello\", \"world\", \"!\")\n\n# 输出结果\nprint(my_string)\n\n[1] \"Helloworld!\"",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_to_lower",
    "href": "chapter/clean_string.html#str_to_lower",
    "title": "15  介绍",
    "section": "15.7 str_to_lower()",
    "text": "15.7 str_to_lower()\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_to_lower() 函数将字符串中的所有字母转换为小写字母\nmy_string_lower &lt;- str_to_lower(my_string)\n\n# 输出结果\nprint(my_string_lower)\n\n[1] \"hello, world!\"",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_string.html#str_to_upper",
    "href": "chapter/clean_string.html#str_to_upper",
    "title": "15  介绍",
    "section": "15.8 str_to_upper()",
    "text": "15.8 str_to_upper()\nstr_to_upper() 函数是 stringr 包中的一个函数，用于将字符串中的所有字母转换为大写字母。该函数的语法格式如下：\n\nstr_to_upper(\"Hello, world!\")\n\n[1] \"HELLO, WORLD!\"\n\n\n\n15.8.1 正则表达式\n#一般来说，您可以使用以下一些常用语法来构造正则表达式:\n\n.：表示任意一个字符。例如，正则表达式 \"a.c\" 可以匹配列名为 \"abc\"、\"aac\" 等。\n*：表示前面的字符可以重复出现任意次。例如，正则表达式 \"a*c\" 可以匹配列名为 \"c\"、\"ac\"、\"aaac\" 等。\n+：表示前面的字符必须至少出现一次。例如，正则表达式 \"a+c\" 可以匹配列名为 \"ac\"、\"aac\"、\"aaac\" 等，但不能匹配列名为 \"c\"。\n^：表示以某个字符串开头。例如，正则表达式 \"^a\" 可以匹配列名为 \"abc\"、\"ac\" 等，但不能匹配列名为 \"bc\"。\n$：表示以某个字符串结尾。例如，正则表达式 \"c$\" 可以匹配列名为 \"abc\"、\"ac\" 等，但不能匹配列名为 \"cb\"。\n\n除了以上语法，正则表达式还有很多其他用法。\n\n\n15.8.2 正则表达式的高级语法有哪些\n除了以上提到的正则表达式的基本语法，还有一些高级语法可以用来构造更复杂的正则表达式。例如，您可以使用以下一些常用语法来构造正则表达式:\n\n|：表示或的关系。例如，正则表达式 \"a|b\" 可以匹配列名为 \"a\"、\"b\" 等。\n[]：表示括号中的任意一个字符。例如，正则表达式 \"[ab]\" 可以匹配列名为 \"a\"、\"b\" 等。\n[a-z]：表示小写字母 a 到 z 中的任意一个字符。例如，正则表达式 \"[a-z]\" 可以匹配列名为 \"a\"、\"b\"、\"c\" 等。\n[A-Z]：表示大写字母 A 到 Z 中的任意一个字符。例如，正则表达式 \"[A-Z]\" 可以匹配列名为 \"A\"、\"B\"、\"C\" 等。\n\\\\d：表示任意一个数字。例如，正则表达式 \"\\\\d\" 可以匹配列名为 \"1\"、\"2\"、\"3\" 等。\n\n除了以上语法，正则表达式还有很多其他高级语法。您可以参考 R 语言的官方文档或相关资料来了解更多信息。",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>字符串处理</span>"
    ]
  },
  {
    "objectID": "chapter/clean_tips.html",
    "href": "chapter/clean_tips.html",
    "title": "16  常用技巧",
    "section": "",
    "text": "16.1 类型转换\nlibrary(tidyverse)\ndata&lt;-data.frame(id=1:12,age=c(0.5,1.2,3,4,5,6),sex=c('男','女'),virus=c('1','0'))\ndata\ndata_new&lt;-data %&gt;%\n  mutate(id=as.character(id), #转为字符型\n         virus=as.numeric(virus)) #转为数值型\ndata_new",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>常用技巧</span>"
    ]
  },
  {
    "objectID": "chapter/clean_tips.html#连续转分类水平转换",
    "href": "chapter/clean_tips.html#连续转分类水平转换",
    "title": "16  常用技巧",
    "section": "16.2 连续转分类/水平转换",
    "text": "16.2 连续转分类/水平转换\n\n\n\n\n\n\n提示\n\n\n\nifelse()和case_when()函数二选一。简单二分类用ifelse()即可，复杂情况推荐用case_when()可避免多个ifelse()嵌套结构。\n\n\n\ndata_new %&gt;%\n  mutate(agegroup=ifelse(age&lt;1,'0~1y',\n                         ifelse(age&lt;2,'1~2y','2y+'))) %&gt;%\n  mutate(agegroup2=case_when(age&lt;1~'0~1y',\n                             age&lt;2~'1~2y',\n                             T~'2y+')) %&gt;%\n  mutate(sex2=ifelse(sex=='男','Male','Female'),\n         sex3=case_when(sex=='男'~'Male',\n                        T~'Female'))\n\n\n  \n\n\n\n\n\n\n\n\n\n提示\n\n\n\n男性和女性贫血判定的界值不同，根据性别和界值判断是否贫血。\n\n\n\ndata&lt;-data.frame(\n  sex=rep(c('Female','Male'),3),\n  Hb=runif(6,100,150) %&gt;% round())\n\ndata\n\n\n  \n\n\ndata %&gt;%\n  mutate(cutoff=ifelse(sex=='Female',115,130),\n         Hb_2=ifelse(Hb&lt;=cutoff,'abnormal','normal')) %&gt;%\n  select(-cutoff)\n\n\n  \n\n\ndata %&gt;%\n  mutate(Hb_2=case_when(\n    Hb&lt;=115 & sex=='Female'~'abnormal',\n    Hb&lt;=130 & sex=='Male'~'abnormal',\n    T~'normal'\n  ))",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>常用技巧</span>"
    ]
  },
  {
    "objectID": "chapter/clean_wider_longer.html",
    "href": "chapter/clean_wider_longer.html",
    "title": "17  长宽数据转换",
    "section": "",
    "text": "library(tidyverse)\n\ndata_longer&lt;-data.frame(region=LETTERS[1:3],\n                       year=rep(2019:2023,each=3),\n                       case=round(runif(15)*100))\ndata_longer\n\n\n  \n\n\n\n\n17.0.1 长转宽\n\ndata_wider1&lt;-data_longer %&gt;%\n  pivot_wider(id_cols = year,names_from = 'region',values_from = 'case' )\ndata_wider1\n\n\n  \n\n\ndata_wider2&lt;-data_longer %&gt;%\n  pivot_wider(id_cols = region,names_from = 'year',names_prefix = 'y_',values_from = 'case' )\ndata_wider2\n\n\n  \n\n\n\n\n\n17.0.2 宽转长\n\ndata_longer2&lt;-data_wider1 %&gt;%\n  pivot_longer(c(A,B,C),names_to = 'region',values_to='count')\ndata_longer2\n\n\n  \n\n\n\n\n\n17.0.3 作图多用长数据\n\nggplot(data_longer,aes(factor(year),y=case,fill=region))+\n  geom_col(position = 'dodge')+\n  theme_bw()+\n  ggsci::scale_fill_jama()",
    "crumbs": [
      "数据清理",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>长宽数据转换</span>"
    ]
  },
  {
    "objectID": "chapter/viz_bar.html",
    "href": "chapter/viz_bar.html",
    "title": "18  主题",
    "section": "",
    "text": "library(tidyverse)\ntheme_set(theme_bw())\n\n\ndata&lt;-data.frame(x=rep(c('A','B','C'),time=2),y=c('Female','Male'),value=round(runif(6,20,100)))\n\ndata\n\n\n  \n\n\n\n\nggplot(data,aes(x,value,fill=y))+\n  geom_col()\n\n\n\n\n\n\n\n\n\n18.0.1 坐标轴标题-axis.title\n\nggplot(mtcars,aes(cyl,mpg))+\n  labs(x='hjust=0.2,vjust = -3',y='hjust=0.8,vjust = 3')+\n  theme(axis.title = element_text(colour = 'red',face='bold'),\n        axis.title.x = element_text(hjust=0.2,vjust = -3),\n        axis.title.y = element_text(hjust=0.8,vjust = 3)\n        )",
    "crumbs": [
      "数据可视化",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>ggplot2</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html",
    "href": "chapter/stats_base.html",
    "title": "19  基础知识",
    "section": "",
    "text": "19.1 连续型随机变量\ndf&lt;-data.frame(x=seq(-5,5,by=0.01)) %&gt;%\n  mutate(pdf=dnorm(x),cdf=pnorm(x),icdf=qnorm(cdf))\n\ndf",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html#连续型随机变量",
    "href": "chapter/stats_base.html#连续型随机变量",
    "title": "19  基础知识",
    "section": "",
    "text": "19.1.1 密度函数/分布函数\n\n概率密度函数累计分布函数累计分布函数的反函数\n\n\n\ndf %&gt;%\n  ggplot(aes(x,pdf))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\ndf %&gt;%\n  ggplot(aes(x,cdf))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\ndf %&gt;%\n  ggplot(aes(cdf,icdf))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n19.1.2 3\\(\\sigma\\)(西格玛)准则\n\nggplot(df,aes(x,pdf))+\n  geom_line()+\n  geom_area(aes(x=ifelse(abs(x)&lt;3,x,NA),fill='0.9974'),alpha=0.5)+\n  geom_area(aes(x=ifelse(abs(x)&lt;2,x,NA),fill='0.9545'),alpha=0.5)+\n  geom_area(aes(x=ifelse(abs(x)&lt;1,x,NA),fill='0.6827'),alpha=0.5)+\n  geom_vline(xintercept =c(-3,-2,-1,1,2,3),linetype='dashed')+\n  scale_x_continuous(breaks=c(-5:5))+\n  labs(x='Z',y='概率密度(pdf)')+\n  scale_fill_futurama()+\n  guides(fill=guide_legend(title='曲线下面积',override.aes = list(alpha=0.2)))\n\n\n\n\n\n\n\n\n\npnorm(1:3)-pnorm(-1:-3)\n\n[1] 0.6826895 0.9544997 0.9973002\n\n\n\n(pnorm(1:3)-pnorm(-1:-3)) %&gt;%\n  `/`(2) %&gt;%\n  `-`(0.5,.) %&gt;%\n  qnorm()\n\n[1] -1 -2 -3\n\n\n\n\n19.1.3 Z检验界值和参考值范围\n\n-qnorm(c(0.005,0.01,0.025,0.05,0.1))\n\n[1] 2.575829 2.326348 1.959964 1.644854 1.281552\n\n\n\n-qnorm(c(0.005,0.01,0.025,0.05,0.1)) %&gt;%\n  pnorm()\n\n[1] 0.995 0.990 0.975 0.950 0.900\n\n\n\n\n19.1.4 频率分布直方图\n\nrunif(10000) %&gt;%\n  qnorm() %&gt;%\n  hist(breaks = 50)",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html#离散型随机变量",
    "href": "chapter/stats_base.html#离散型随机变量",
    "title": "19  基础知识",
    "section": "19.2 离散型随机变量",
    "text": "19.2 离散型随机变量\n\n19.2.1 分布列\n\nrpois(1000,5) %&gt;% \n  table() %&gt;% as.data.frame() %&gt;%\n  setNames(c('k','probality')) %&gt;%\n  adorn_percentages(denominator = 'col') %&gt;%\n  ggplot(aes(k,probality))+\n  geom_col()",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  },
  {
    "objectID": "chapter/stats_base.html#ci的含义",
    "href": "chapter/stats_base.html#ci的含义",
    "title": "19  基础知识",
    "section": "19.3 95%CI的含义",
    "text": "19.3 95%CI的含义\n\ndf&lt;-data.frame(miu=runif(1000,min=1,max=100),sigma=runif(1000,min=1,max=20)) %&gt;%\n  rowwise() %&gt;%\n  mutate(sample=list(rnorm(25,miu,sigma)),\n         x_bar=mean(sample),\n         sd=sd(sample),\n         ci_lower=x_bar-1.96*sd/5,\n         ci_upper=x_bar+1.96*sd/5,\n         within_ci=ifelse(miu&gt;=ci_lower & miu &lt;=ci_upper,T,F)) %&gt;%\n  mutate(across(where(is.numeric),~round(.x,2)))\n\ndf\n\n\n  \n\n\nmean(df$within_ci)\n\n[1] 0.938",
    "crumbs": [
      "统计",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>基础篇</span>"
    ]
  }
]