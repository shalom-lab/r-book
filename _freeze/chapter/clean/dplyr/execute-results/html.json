{
  "hash": "8357dfa2f0c6491e63b2c9df6264cbf1",
  "result": {
    "engine": "knitr",
    "markdown": "## 介绍\n\n`dplyr`是一个R语言包，它提供了一组用于进行数据操作和转换的函数。下面是一些`dplyr`包中常用的函数及其作用：\n\n-   `select()`: 选择列\n-   `mutate()`: 创建新的计算变量\n-   `filter()`: 根据条件选择行\n-   `group_by()`: 按照指定的列对数据进行分组\n-   `summarize()`: 计算每组数据的摘要统计量\n-   `arrange()`: 按照指定的列排序\n-   `distinct()`: 选择唯一的行\n-   `join()`: 将多个表格合并成一个表格\n-   `union()`: 将两个表格合并为一个表格（类似于SQL中的UNION）\n-   `intersect()`: 取两个表格的交集（类似于SQL中的INTERSECT）\n-   `anti_join()`: 取两个表格的差集（类似于SQL中的EXCEPT）\n\n## 示例数据\n\n\n\n\n::: {.cell context='setup'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n::: {.cell context='setup'}\n\n```{.r .cell-code}\ndata<-data.frame(x=-2:3,y=1:6,a=rep(c('A','B'),each=3))\ndata\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\",\"3\":\"A\"},{\"1\":\"-1\",\"2\":\"2\",\"3\":\"A\"},{\"1\":\"0\",\"2\":\"3\",\"3\":\"A\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## select()\n\n`select()`是`dplyr`包中的一个函数，它用于选择数据框中的特定列。例如，假设你有一个名为`data`的数据框，其中包含多列，你可以用以下代码选择列`x`和列`y`：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(data, x, y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\"},{\"1\":\"-1\",\"2\":\"2\"},{\"1\":\"0\",\"2\":\"3\"},{\"1\":\"1\",\"2\":\"4\"},{\"1\":\"2\",\"2\":\"5\"},{\"1\":\"3\",\"2\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n在这个例子中，`select()`函数会返回一个新的数据框，其中只包含原来数据框中的列`x`和列`y`。你也可以使用通配符来选择多个列。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(data, starts_with(\"x\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-2\"},{\"1\":\"-1\"},{\"1\":\"0\"},{\"1\":\"1\"},{\"1\":\"2\"},{\"1\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这里的`starts_with()`函数会匹配所有以`x`开头的列名，例如`x1`、`x2`等，然后`select()`函数会返回一个新的数据框，其中包含原数据框中所有以`x`开头的列。\n\n除了选择列，你还可以用`select()`函数来排除列。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(data, -x)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"y\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"A\"},{\"1\":\"2\",\"2\":\"A\"},{\"1\":\"3\",\"2\":\"A\"},{\"1\":\"4\",\"2\":\"B\"},{\"1\":\"5\",\"2\":\"B\"},{\"1\":\"6\",\"2\":\"B\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这里，我们使用了负号（`-`）来排除列`x`，`select()`函数会返回一个新的数据框，其中包含原数据框中除列`x`以外的所有列。\n\n你也可以使用类似的方式来排除多个列，例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(data, -starts_with(\"x\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"y\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"A\"},{\"1\":\"2\",\"2\":\"A\"},{\"1\":\"3\",\"2\":\"A\"},{\"1\":\"4\",\"2\":\"B\"},{\"1\":\"5\",\"2\":\"B\"},{\"1\":\"6\",\"2\":\"B\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这里，我们使用了`starts_with()`函数来匹配所有以`x`开头的列名，然后用负号排除这些列。`select()`函数会返回一个新的数据框，其中包含原数据框中除了以`x`开头的列以外的所有列。\n\n除了使用函数来选择或排除列，你还可以使用类似于SQL中的语法来指定要选择或排除的列。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(data, x, y, -a)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\"},{\"1\":\"-1\",\"2\":\"2\"},{\"1\":\"0\",\"2\":\"3\"},{\"1\":\"1\",\"2\":\"4\"},{\"1\":\"2\",\"2\":\"5\"},{\"1\":\"3\",\"2\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这里，我们指定了要选择列`x`和列`y`，并使用负号排除列`a`。`select()`函数会返回一个新的数据框，其中包含原数据框中的列`x`、列`y`，除列`a`以外的所有列。\n\n### 选择器函数有哪些\n\n在 `tidyverse` 语法中，有多种选择器函数可以用来选择数据框中的特定列。这些选择器函数主要有如下几种:\n\n-   `starts_with()`：选择名称以某个字符串开头的列。\n-   `ends_with()`：选择名称以某个字符串结尾的列。\n-   `contains()`：选择名称中包含某个字符串的列。\n-   `matches()`：选择名称与某个正则表达式相匹配的列。\n-   `one_of()`：选择名称在指定列表中出现过的列。\n-   `everything()`：选择所有列。\n\n\n\n\n::: {.cell context='setup'}\n\n```{.r .cell-code}\nmy_data<-data.frame(age=1:3) %>%\n  mutate(age1=age,age2=age,Age1=age,new_age=age,new_age_old=age,\n         chr_age=as.character(age))\nmy_data\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age1\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age2\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age1\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age_old\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"chr_age\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"1\",\"7\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2\",\"7\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3\",\"7\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n例如，如果您想要选择 `my_data` 数据框中名称以 `age` 开头的列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(starts_with(\"age\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age1\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age2\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age1\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\",\"4\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这条语句的意思是，在 `my_data` 数据框中选择名称以 `age` 开头的列，并将结果保存到变量 `my_data_selected` 中。\n\n如果您想要选择 `my_data` 数据框中名称以 `age` 结尾的列。\n\n如果您想要选择 `my_data` 数据框中名称以 `age` 结尾的列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(ends_with(\"age\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"chr_age\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n如果您想要选择 `my_data` 数据框中名称中包含 `age` 的列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(contains(\"age\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age1\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age2\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age1\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age_old\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"chr_age\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"1\",\"7\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2\",\"7\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3\",\"7\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n如果您想要选择 `my_data` 数据框中名称与正则表达式 `\"a.e\"` 相匹配的列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(matches(\"a.e\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age1\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age2\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age1\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age_old\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"chr_age\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"1\",\"7\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2\",\"7\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3\",\"7\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n如果您想要选择 `my_data` 数据框中名称在列表 `c(\"age\", \"height\")` 中出现过的列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(one_of(c(\"age\", \"height\")))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown columns: `height`\n```\n\n\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\"},{\"1\":\"2\"},{\"1\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n如果您想要选择 `my_data` 数据框中的所有列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(everything())\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age1\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age2\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age1\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age_old\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"chr_age\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"1\",\"7\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2\",\"7\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3\",\"7\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### 其他的选择器函数\n\n除了以上提到的选择器函数，`tidyverse` 语法中还有一些其他选择器函数可以用来选择数据框中的特定列。例如，还有以下几种常用的选择器函数:\n\n-   `num_range()`：选择名称在指定数字范围内的列。\n-   `where()`：选择满足某个条件的列。\n\n例如，如果您想要选择 `my_data` 数据框中名称在数字范围 \\[1,5\\] 内的列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% select(num_range(1, 5))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[],\"data\":[],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nmy_data %>% select(where(is.numeric))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age1\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age2\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age1\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"new_age_old\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"3\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nmy_data %>% select(where(is.character))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"chr_age\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\"},{\"1\":\"2\"},{\"1\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### match选择器函数中的正则表达式\n\n在 `match()` 选择器函数中，您可以使用正则表达式来匹配列名。正则表达式的语法与 R 语言的其他用法相同，详细内容可以参考 R 语言的官方文档。\n\n## mutate()\n\n`mutate()`是`dplyr`包中的一个函数，用于创建新的计算变量。例如，假设你有一个名为`data`的数据框，其中包含一列名为`x`和一列名为`y`，你可以用以下代码创建一个新的列`z`，其值为`x`和`y`的和：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(data, z = x + y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"z\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\",\"3\":\"A\",\"4\":\"-1\"},{\"1\":\"-1\",\"2\":\"2\",\"3\":\"A\",\"4\":\"1\"},{\"1\":\"0\",\"2\":\"3\",\"3\":\"A\",\"4\":\"3\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\",\"4\":\"5\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\",\"4\":\"7\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\",\"4\":\"9\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n你可以用类似的方式创建其他任何计算变量。例如，你可以根据条件创建一个分类变量：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(data, group = ifelse(x > 0, \"positive\", \"negative\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"group\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\",\"3\":\"A\",\"4\":\"negative\"},{\"1\":\"-1\",\"2\":\"2\",\"3\":\"A\",\"4\":\"negative\"},{\"1\":\"0\",\"2\":\"3\",\"3\":\"A\",\"4\":\"negative\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\",\"4\":\"positive\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\",\"4\":\"positive\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\",\"4\":\"positive\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n另外，你也可以在`mutate()`函数中使用其他函数，例如聚合函数或统计函数，来对原数据进行处理。例如，你可以计算每个`x`值的均值和标准差：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(data,\n  x_mean = mean(x),\n  x_sd = sd(x)\n)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x_mean\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"x_sd\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\",\"3\":\"A\",\"4\":\"0.5\",\"5\":\"1.870829\"},{\"1\":\"-1\",\"2\":\"2\",\"3\":\"A\",\"4\":\"0.5\",\"5\":\"1.870829\"},{\"1\":\"0\",\"2\":\"3\",\"3\":\"A\",\"4\":\"0.5\",\"5\":\"1.870829\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\",\"4\":\"0.5\",\"5\":\"1.870829\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\",\"4\":\"0.5\",\"5\":\"1.870829\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\",\"4\":\"0.5\",\"5\":\"1.870829\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n你还可以使用`group_by()`函数来根据指定的列对数据进行分组，然后在每组中应用`mutate()`函数，以便为每个组分别计算新的变量。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by(data, a) %>%\n  mutate(\n    x_mean = mean(x),\n    x_sd = sd(x)\n  )\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x_mean\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"x_sd\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-2\",\"2\":\"1\",\"3\":\"A\",\"4\":\"-1\",\"5\":\"1\"},{\"1\":\"-1\",\"2\":\"2\",\"3\":\"A\",\"4\":\"-1\",\"5\":\"1\"},{\"1\":\"0\",\"2\":\"3\",\"3\":\"A\",\"4\":\"-1\",\"5\":\"1\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\",\"4\":\"2\",\"5\":\"1\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\",\"4\":\"2\",\"5\":\"1\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\",\"4\":\"2\",\"5\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## filter()\n\n`filter()`是`dplyr`包中的一个函数，它用于根据指定的条件选择数据框中的行。例如，假设你有一个名为`data`的数据框，其中包含多行多列，你可以用以下代码选择值大于0的行：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(data, x > 0)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n在这个例子中，`filter()`函数会返回一个新的数据框，其中只包含原数据框中值大于0的行。你也可以使用多个条件来进行筛选。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(data, x > 0, y < 5)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这里，`filter()`函数会返回一个新的数据框，其中只包含原数据框中值大于0且值小于5的行。\n\n除了简单的条件判断，你还可以在`filter()`函数中使用复杂的逻辑表达式来进行筛选。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(data, x > 0 & y < 5 | a == 'B')\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"a\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"4\",\"3\":\"B\"},{\"1\":\"2\",\"2\":\"5\",\"3\":\"B\"},{\"1\":\"3\",\"2\":\"6\",\"3\":\"B\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这里，我们使用了与（`&`）、或（`|`）以及等于（`==`）符号来构造复杂的逻辑表达式，`filter()`函数会返回一个新的数据框，其中只包含原数据框中符合\n\n## group_by()\n\n\n\n\n::: {.cell context='setup'}\n\n```{.r .cell-code}\nmy_data<-data.frame(\n  id=1:6,\n  age=3:4,\n  sex=rep(c('Female','Male'),each=3),\n  los=runif(6,3,10) %>% round()\n)\nmy_data\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"los\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"7\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"Female\",\"4\":\"10\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"8\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"5\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"Male\",\"4\":\"7\"},{\"1\":\"6\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"9\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n`group_by()` 是 dplyr包中的一个函数，它能够将数据按照指定的条件进行分组。通常，我们使用 `group_by()` 函数将数据按照某个变量的值进行分组，然后再对每个分组进行进一步的操作。\n\n例如，假设我们有一个数据框 `my_data`，如果我们想要将数据框 `my_data` 按照 `age` 变量的值进行分组，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data_grouped <- group_by(my_data, age)\n```\n:::\n\n\n\n\n这条语句的意思是，使用 `group_by()` 函数将数据框 `my_data` 按照 `age` 变量的值进行分组，并将结果保存到变量 `my_data_grouped` 中。\n\n接下来，我们可以对每个分组进行进一步的操作。例如，如果我们想要计算每个分组中 `los` 变量的平均值，可以使用 `summarise()` 函数来实现:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(\n  my_data_grouped, \n  mean_nlos = mean(los))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mean_nlos\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"7.333333\"},{\"1\":\"4\",\"2\":\"8.000000\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### 多级分组\n\n当然，您也可以使用 `group_by()` 函数进行多级分组。例如，如果您想要将数据框 `my_data` 按照 `age` 和 `sex` 两个变量的值进行多级分组，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>%\n  group_by(age, sex) %>%\n  summarise(mean=mean(los),median=median(los))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'age'. You can override using the `.groups`\nargument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"age\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"mean\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"median\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"Female\",\"3\":\"7.5\",\"4\":\"7.5\"},{\"1\":\"3\",\"2\":\"Male\",\"3\":\"7.0\",\"4\":\"7.0\"},{\"1\":\"4\",\"2\":\"Female\",\"3\":\"10.0\",\"4\":\"10.0\"},{\"1\":\"4\",\"2\":\"Male\",\"3\":\"7.0\",\"4\":\"7.0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### 重新分组\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>%\n  group_by(age) %>%\n  group_by(sex) %>% #重新分组\n  summarise(mean=mean(los),median=median(los))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"sex\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"mean\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"median\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Female\",\"2\":\"8.333333\",\"3\":\"8\"},{\"1\":\"Male\",\"2\":\"7.000000\",\"3\":\"7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### 取消分组\n\n如果您想要取消分组，可以使用 `ungroup()` 函数。例如，假设您已经将数据框 `my_data` 按照 `age` 变量的值进行分组，并将结果保存到变量 `my_data_grouped` 中，如果您想要取消分组，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>%\n  group_by(age) %>%\n  ungroup() %>%\n  summarise(mean=mean(los),median=median(los))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"median\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"7.666667\",\"2\":\"7.5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n取消分组后，数据框会恢复到未分组的状态。\n\n## summarise()\n\n`summarise()`是`dplyr`包中的一个函数，它用于对数据框进行汇总。例如，假设你有一个名为`data`的数据框，其中包含多行多列，你可以用以下代码计算每个组的均值：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by(my_data, sex) %>%\n  summarise(mean = mean(los))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"sex\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"mean\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Female\",\"2\":\"8.333333\"},{\"1\":\"Male\",\"2\":\"7.000000\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n在这个例子中，我们首先使用`group_by()`函数将数据框按照列`sex`进行分组，然后使用`summarise()`函数计算每个组的均值。`summarise()`函数会返回一个新的数据框，其中包含每个组的均值以及对应的组名。\n\n除了计算均值，你还可以使用`summarise()`函数计算其他统计量，例如求和、求最大值求最小值等。例如：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by(my_data, sex) %>%\n  summarise(sum = sum(los),\n            max = max(los),\n            min = min(los))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"sex\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"sum\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"max\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"min\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Female\",\"2\":\"25\",\"3\":\"10\",\"4\":\"7\"},{\"1\":\"Male\",\"2\":\"21\",\"3\":\"9\",\"4\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## distinct()\n\n`distinct()` 函数是 `tidyverse` 包中的一个函数，用于选择指定数据框中不同的行。例如，如果您想要从 `my_data` 数据框中选择出不同的行，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% distinct(sex,.keep_all = T)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"los\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"7\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这条语句的意思是，在 `my_data` 数据框中选择出不同的行，并将结果保存到变量 `my_data_distinct` 中。\n\n除了上述语句，您还可以使用 `distinct()` 函数指定选择哪些列来检查行的唯一性。例如，如果您想要仅以 `age` 列为依据来选择不同的行，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% distinct(age)\n```\n:::\n\n\n\n\n这条语句的意思是，在 `my_data` 数据框中选择出不同的行，并仅以 `age` 列为依据来检查行的唯一性。由于这条语句只检查了 `age` 列，所以如果两行中 `age` 列的值相同，那么这两行都会被认为是重复的，只会保留一行。最终的结果会被保存到变量 `my_data_distinct` 中。\n\n另外，您还可以使用 `distinct()` 函数中的 `.keep_all` 参数来指定是否保留所有列。例如，如果您想要保留所有列，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% distinct(sex,age,.keep_all = TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"los\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"7\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"Female\",\"4\":\"10\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"5\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"Male\",\"4\":\"7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n这条语句的意思是，在 `my_data` 数据框中选择出不同的行，并保留所有列。由于这条语句指定了 `.keep_all = TRUE` 参数，所以所有的列都会被保留。最终的结果会被保存到变量 `my_data_distinct` 中。\n\n## arrange()\n\n### 升序\n\n`arrange()` 函数是 `tidyverse` 包中的一个函数，用于对指定数据框中的行进行排序。例如，如果您想要对 `my_data` 数据框中的行按照 `age` 列的值进行排序，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% arrange(id)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"los\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"7\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"Female\",\"4\":\"10\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"8\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"5\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"Male\",\"4\":\"7\"},{\"1\":\"6\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"9\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### 降序\n\n除了上述语句，您还可以使用 `arrange()` 函数中的 `desc()` 函数来指定是否按照降序进行排序。例如，如果您想要按照降序排序，可以使用如下语句:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% \n  arrange(desc(id))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"los\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"6\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"9\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"Male\",\"4\":\"7\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"5\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"8\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"Female\",\"4\":\"10\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### 多个变量\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>%\n  arrange(sex,desc(id))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"los\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"8\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"Female\",\"4\":\"10\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"Female\",\"4\":\"7\"},{\"1\":\"6\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"9\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"Male\",\"4\":\"7\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"Male\",\"4\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}