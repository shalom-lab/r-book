## 常用操作

### 赋值

```{r}
a<-1
a

b=2 #不推荐，避免用等号
b

3->c #不常用
c

assign('d',4) #高级用法
d
```

### R语言中<-和=的区别

在 R 语言中，`<-` 和 `=` 都可以用来赋值，但它们之间还是有一些区别的。

-   `<-`: 这是 R 语言中最常用的赋值操作符。它用来将右侧的值赋给左侧的变量。例如，`x <- 5` 表示将 5 赋给变量 `x`。
-   `=`: 这是 R 语言中次常用的赋值操作符。它的语法与 `<-` 类似，也用来将右侧的值赋给左侧的变量。例如，`x = 5` 也表示将 5 赋给变量 `x`。

在实际使用中，`<-` 和 `=` 的区别主要在于语义上的差异。通常来说，`<-` 操作符更加符合人类的思维方式，因为它更加形象地表达了赋值的意义（即将值从右向左流动）。而 `=` 操作符则更像是一个等号，表示变量与值相等。建议使用 `<-` 操作符进行赋值，这样能够更好地保持统一，并且能够更方便地理解代码。

### 运算

```{r}
1+2
1-2
1/2
1*2
2^3 # 3次方
5 %/% 2 #取商
5 %% 2 #取余
```

### 判断

```{r}
T & F  #与 and
T || F #或 or
!T #非 not
```

### 取子集

`[]` 取向量中的某些元素,起始为1

```{r}
month.abb
month.abb[1]
month.abb[c(1,3,5)]
```

`$` 取数据框`data.frame`的某一列/取列表`list`的某一项

```{r}
head(mtcars)
class(mtcars)
names(mtcars)
mtcars$mpg
```

```{r}
ls<-list(a=1,b=month.abb)
class(ls)
ls$b
```

`[[]]取列表某一项等`

```{r}
ls<-list(a=1,b=month.abb)
ls[[b]]

ls[[2]]
```
