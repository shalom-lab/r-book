## 介绍

`dplyr`是一个R语言包，它提供了一组用于进行数据操作和转换的函数。下面是一些`dplyr`包中常用的函数及其作用：

-   `mutate()`: 创建新的计算变量
-   `filter()`: 根据条件选择行
-   `select()`: 选择列
-   `arrange()`: 按照指定的列排序
-   `distinct()`: 选择唯一的行
-   `summarize()`: 计算每组数据的摘要统计量
-   `group_by()`: 按照指定的列对数据进行分组
-   `join()`: 将多个表格合并成一个表格
-   `union()`: 将两个表格合并为一个表格（类似于SQL中的UNION）
-   `intersect()`: 取两个表格的交集（类似于SQL中的INTERSECT）
-   `anti_join()`: 取两个表格的差集（类似于SQL中的EXCEPT）

##mutate()

`mutate()`是`dplyr`包中的一个函数，用于创建新的计算变量。例如，假设你有一个名为`data`的数据框，其中包含一列名为`x`和一列名为`y`，你可以用以下代码创建一个新的列`z`，其值为`x`和`y`的和：

```
data <- mutate(data, z = x + y)
```
你可以用类似的方式创建其他任何计算变量。例如，你可以根据条件创建一个分类变量：

```
data <- mutate(data, group = ifelse(x > 0, "positive", "negative"))
```

另外，你也可以在`mutate()`函数中使用其他函数，例如聚合函数或统计函数，来对原数据进行处理。例如，你可以计算每个`x`值的均值和标准差：

```
data <- mutate(data,
  x_mean = mean(x),
  x_sd = sd(x)
)
```

你还可以使用`group_by()`函数来根据指定的列对数据进行分组，然后在每组中应用`mutate()`函数，以便为每个组分别计算新的变量。例如：

```
data <- group_by(data, group) %>%
  mutate(
    x_mean = mean(x),
    x_sd = sd(x)
  )
```

## select()

`select()`是`dplyr`包中的一个函数，它用于选择数据框中的特定列。例如，假设你有一个名为`data`的数据框，其中包含多列，你可以用以下代码选择列`x`和列`y`：

```
data <- select(data, x, y)
```

在这个例子中，`select()`函数会返回一个新的数据框，其中只包含原来数据框中的列`x`和列`y`。你也可以使用通配符来选择多个列。例如：

```
data <- select(data, starts_with("x"))
```

这里的`starts_with()`函数会匹配所有以`x`开头的列名，例如`x1`、`x2`等，然后`select()`函数会返回一个新的数据框，其中包含原数据框中所有以`x`开头的列。

除了选择列，你还可以用`select()`函数来排除列。例如：

```
data <- select(data, -z)
```

这里，我们使用了负号（`-`）来排除列`z`，`select()`函数会返回一个新的数据框，其中包含原数据框中除列`z`以外的所有列。

你也可以使用类似的方式来排除多个列，例如：

```
data <- select(data, -starts_with("x"))
```

这里，我们使用了`starts_with()`函数来匹配所有以`x`开头的列名，然后用负号排除这些列。`select()`函数会返回一个新的数据框，其中包含原数据框中除了以`x`开头的列以外的所有列。

除了使用函数来选择或排除列，你还可以使用类似于SQL中的语法来指定要选择或排除的列。例如：

```
data <- select(data, x, y, -z)
```

这里，我们指定了要选择列`x`和列`y`，并使用负号排除列`z`。`select()`函数会返回一个新的数据框，其中包含原数据框中的列`x`、列`y`，除列`z`以外的所有列。

### 选择器函数有哪些

在 `tidyverse` 语法中，有多种选择器函数可以用来选择数据框中的特定列。这些选择器函数主要有如下几种:

-   `starts_with()`：选择名称以某个字符串开头的列。
-   `ends_with()`：选择名称以某个字符串结尾的列。
-   `contains()`：选择名称中包含某个字符串的列。
-   `matches()`：选择名称与某个正则表达式相匹配的列。
-   `one_of()`：选择名称在指定列表中出现过的列。
-   `everything()`：选择所有列。

例如，如果您想要选择 `my_data` 数据框中名称以 `age` 开头的列，可以使用如下语句:

```
Copy codemy_data_selected <- my_data %>% select(starts_with("age"))

```

这条语句的意思是，在 `my_data` 数据框中选择名称以 `age` 开头的列，并将结果保存到变量 `my_data_selected` 中。

如果您想要选择 `my_data` 数据框中名称以 `age` 结尾的列。

如果您想要选择 `my_data` 数据框中名称以 `age` 结尾的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(ends_with("age"))
```

如果您想要选择 `my_data` 数据框中名称中包含 `age` 的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(contains("age"))
```


如果您想要选择 `my_data` 数据框中名称与正则表达式 `"a.e"` 相匹配的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(matches("a.e"))
```


如果您想要选择 `my_data` 数据框中名称在列表 `c("age", "height")` 中出现过的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(one_of(c("age", "height")))
```

如果您想要选择 `my_data` 数据框中的所有列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(everything())
```

### 其他的选择器函数

除了以上提到的选择器函数，`tidyverse` 语法中还有一些其他选择器函数可以用来选择数据框中的特定列。例如，还有以下几种常用的选择器函数:

-   `num_range()`：选择名称在指定数字范围内的列。
-   `cols()`：选择指定的列。
-   `which()`：选择满足某个条件的列。

例如，如果您想要选择 `my_data` 数据框中名称在数字范围 \[1,5\] 内的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(num_range(1, 5))
```

如果您想要选择 `my_data` 数据框中指定的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(cols(age, height))
```

这条语句的意思是，在 `my_data` 数据框中选择 `age` 和 `height` 两列，并将结果保存到变量 `my_data_selected` 中。

如果您想要选择 `my_data` 数据框中满足某个条件的列，可以使用如下语句:

```
my_data_selected <- my_data %>% select(which(colnames(my_data) %in% c("age", "height")))
```

这条语句的意思是，在 `my_data` 数据框中选择名称在列表 `c("age", "height")` 中出现过的列，并将结果保存到变量 `my_data_selected` 中。

通过使用上述语句，您可以方便地选择数据框中的特定列。更多关于选择器函数的信息，可以参考 `tidyverse` 官方文档。

### match选择器函数中的正则表达式

在 `match()` 选择器函数中，您可以使用正则表达式来匹配列名。正则表达式的语法与 R 语言的其他用法相同，详细内容可以参考 R 语言的官方文档。

一般来说，您可以使用以下一些常用语法来构造正则表达式:

-   `.`：表示任意一个字符。例如，正则表达式 `"a.c"` 可以匹配列名为 `"abc"`、`"aac"` 等。
-   `*`：表示前面的字符可以重复出现任意次。例如，正则表达式 `"a*c"` 可以匹配列名为 `"c"`、`"ac"`、`"aaac"` 等。
-   `+`：表示前面的字符必须至少出现一次。例如，正则表达式 `"a+c"` 可以匹配列名为 `"ac"`、`"aac"`、`"aaac"` 等，但不能匹配列名为 `"c"`。

-   `^`：表示以某个字符串开头。例如，正则表达式 `"^a"` 可以匹配列名为 `"abc"`、`"ac"` 等，但不能匹配列名为 `"bc"`。
-   `$`：表示以某个字符串结尾。例如，正则表达式 `"c$"` 可以匹配列名为 `"abc"`、`"ac"` 等，但不能匹配列名为 `"bc"`。

除了以上语法，正则表达式还有很多其他用法。

### 正则表达式的高级语法有哪些

除了以上提到的正则表达式的基本语法，还有一些高级语法可以用来构造更复杂的正则表达式。例如，您可以使用以下一些常用语法来构造正则表达式:

-   `|`：表示或的关系。例如，正则表达式 `"a|b"` 可以匹配列名为 `"a"`、`"b"` 等。
-   `[]`：表示括号中的任意一个字符。例如，正则表达式 `"[ab]"` 可以匹配列名为 `"a"`、`"b"` 等。
-   `[a-z]`：表示小写字母 a 到 z 中的任意一个字符。例如，正则表达式 `"[a-z]"` 可以匹配列名为 `"a"`、`"b"`、`"c"` 等。
-   `[A-Z]`：表示大写字母 A 到 Z 中的任意一个字符。例如，正则表达式 `"[A-Z]"` 可以匹配列名为 `"A"`、`"B"`、`"C"` 等。
-   `\\d`：表示任意一个数字。例如，正则表达式 `"\\d"` 可以匹配列名为 `"1"`、`"2"`、`"3"` 等。

除了以上语法，正则表达式还有很多其他高级语法。您可以参考 R 语言的官方文档或相关资料来了解更多信息。

## filter()

`filter()`是`dplyr`包中的一个函数，它用于根据指定的条件选择数据框中的行。例如，假设你有一个名为`data`的数据框，其中包含多行多列，你可以用以下代码选择值大于0的行：

```
data <- filter(data, x > 0)
```

在这个例子中，`filter()`函数会返回一个新的数据框，其中只包含原数据框中值大于0的行。你也可以使用多个条件来进行筛选。例如：

```
data <- filter(data, x > 0, y < 5)
```

这里，`filter()`函数会返回一个新的数据框，其中只包含原数据框中值大于0且值小于5的行。

除了简单的条件判断，你还可以在`filter()`函数中使用复杂的逻辑表达式来进行筛选。例如：

```
data <- filter(data, x > 0 & y < 5 | z == 0)
```

这里，我们使用了与（`&`）、或（`|`）以及等于（`==`）符号来构造复杂的逻辑表达式，`filter()`函数会返回一个新的数据框，其中只包含原数据框中符合


## group_by()

`group_by()` 是 dplyr 包中的一个函数，它能够将数据按照指定的条件进行分组。通常，我们使用 `group_by()` 函数将数据按照某个变量的值进行分组，然后再对每个分组进行进一步的操作。

例如，假设我们有一个数据框 `my_data`，它包含两个变量，分别为 `name` 和 `age`。如果我们想要将数据框 `my_data` 按照 `age` 变量的值进行分组，可以使用如下语句:

```
my_data_grouped <- group_by(my_data, age)

```

这条语句的意思是，使用 `group_by()` 函数将数据框 `my_data` 按照 `age` 变量的值进行分组，并将结果保存到变量 `my_data_grouped` 中。

接下来，我们可以对每个分组进行进一步的操作。例如，如果我们想要计算每个分组中 `name` 变量的平均值，可以使用 `summarise()` 函数来实现:

```
my_data_summary <- summarise(
  my_data_grouped, 
  mean_name = mean(name))
```

这条语句的意思是，对分组后的数据框 `my_data_grouped` 中的每个分组，计算 `name` 变量的平均值。

### 多级分组

当然，您也可以使用 `group_by()` 函数进行多级分组。例如，如果您想要将数据框 `my_data` 按照 `age` 和 `height` 两个变量的值进行多级分组，可以使用如下语句:

```
Copy codemy_data_grouped <- group_by(my_data, age, height, .drop = F)

```

这条语句的意思是，按照 `age` 和 `height` 两个变量的值进行多级分组，并将结果保存到变量 `my_data_grouped` 中。

在这个例子中，我们还使用了 `.drop` 参数，它的值设置为 `F`。这个参数的作用是，是否将分组后的数据框中不重要的列去掉。如果将 `.drop` 参数设置为 `T`，那么 R 会去掉分组后的数据框中不重要的列。如果将 `.drop` 参数设置为 `F`，则保留分组后的数据框中的所有列。

在使用 `group_by()` 函数时，可以根据实际情况来调整分组条件和参数的值，以实现不同的分组效果。不管是单级分组还是多级分组，

### 重新分组

如果您想要对已经分组的数据进行重新分组，可以再次使用 `group_by()` 函数。例如，假设您已经将数据框 `my_data` 按照 `age` 变量的值进行分组，并将结果保存到变量 `my_data_grouped` 中，如果您想要按照 `height` 变量的值进行重新分组，可以使用如下语句:

```
my_data_grouped <- group_by(my_data_grouped, height)
```

这条语句的意思是，对已经分组的数据框 `my_data_grouped` 按照 `height` 变量的值进行重新分组，并将结果保存到变量 `my_data_grouped` 中。

### 取消分组

如果您想要取消分组，可以使用 `ungroup()` 函数。例如，假设您已经将数据框 `my_data` 按照 `age` 变量的值进行分组，并将结果保存到变量 `my_data_grouped` 中，如果您想要取消分组，可以使用如下语句:

```
my_data_ungrouped <- ungroup(my_data_grouped)
```

这条语句的意思是，对分组后的数据框 `my_data_grouped` 进行取消分组操作，并将结果保存到变量 `my_data_ungrouped` 中。

取消分组后，数据框会恢复到未分组的状态。


## summarise()

`summarise()`是`dplyr`包中的一个函数，它用于对数据框进行汇总。例如，假设你有一个名为`data`的数据框，其中包含多行多列，你可以用以下代码计算每个组的均值：

```
data <- group_by(data, group) %>%
  summarise(mean = mean(x))
```
在这个例子中，我们首先使用`group_by()`函数将数据框按照列`group`进行分组，然后使用`summarise()`函数计算每个组的均值。`summarise()`函数会返回一个新的数据框，其中包含每个组的均值以及对应的组名。

除了计算均值，你还可以使用`summarise()`函数计算其他统计量，例如求和、求最大值求最小值等。例如：
```
data <- group_by(data, group) %>%
  summarise(sum = sum(x),
            max = max(x),
            min = min(x))
```

在这个例子中，我们首先将数据框按照列`group`进行分组，然后使用`summarise()`函数计算每个组的和、最大值和最小值。`summarise()`函数会返回一个新的数据框，其中包含每个组的和、最大值和最小值以及对应的组名。

## distinct()

`distinct()` 函数是 `tidyverse` 包中的一个函数，用于选择指定数据框中不同的行。例如，如果您想要从 `my_data` 数据框中选择出不同的行，可以使用如下语句:

```
my_data_distinct <- my_data %>% distinct()
```

这条语句的意思是，在 `my_data` 数据框中选择出不同的行，并将结果保存到变量 `my_data_distinct` 中。

除了上述语句，您还可以使用 `distinct()` 函数指定选择哪些列来检查行的唯一性。例如，如果您想要仅以 `age` 列为依据来选择不同的行，可以使用如下语句:

```
my_data_distinct <- my_data %>% distinct(age)
```

这条语句的意思是，在 `my_data` 数据框中选择出不同的行，并仅以 `age` 列为依据来检查行的唯一性。由于这条语句只检查了 `age` 列，所以如果两行中 `age` 列的值相同，那么这两行都会被认为是重复的，只会保留一行。最终的结果会被保存到变量 `my_data_distinct` 中。

另外，您还可以使用 `distinct()` 函数中的 `.keep_all` 参数来指定是否保留所有列。例如，如果您想要保留所有列，可以使用如下语句:

```
my_data_distinct <- my_data %>% distinct(.keep_all = TRUE)

```

这条语句的意思是，在 `my_data` 数据框中选择出不同的行，并保留所有列。由于这条语句指定了 `.keep_all = TRUE` 参数，所以所有的列都会被保留。最终的结果会被保存到变量 `my_data_distinct` 中。

## arrange()

`arrange()` 函数是 `tidyverse` 包中的一个函数，用于对指定数据框中的行进行排序。例如，如果您想要对 `my_data` 数据框中的行按照 `age` 列的值进行排序，可以使用如下语句:

```
my_data_arranged <- my_data %>% arrange(age)
```

这条语句的意思是，在 `my_data` 数据框中按照 `age` 列的值进行排序，并将结果保存到变量 `my_data_arranged` 中。

除了上述语句，您还可以使用 `arrange()` 函数中的 `desc()` 函数来指定是否按照降序进行排序。例如，如果您想要按照降序排序，可以使用如下语句:

```
my_data_arranged <- my_data %>% 
  arrange(desc(age))
```

这条语句的意思是，在 `my_data` 数据框中按照 `age` 列的值按照降序进行排序，并将结果保存到变量 `my_data_arranged` 中。

另外，您还可以使用 `arrange()` 函数中的 `dplyr::first()` 函数来选择每组第一行。例如，如果您想要选择每组第一行，可以使用如下语句:

```
my_data_arranged <- my_data %>% arrange(group, dplyr::first())
```

这条语句的意思是，在 `my_data` 数据框中按照 `group` 列的值进行分组，并选择每组第一行。最终的结果会被保存到变量 `my_data_arranged` 中。

除了以上语句，您还可以使用 `arrange()` 函数中的 `dplyr::last()` 函数来选择每组最后一行。例如，如果您想要选择每组最后一行，可以使用如下语句:

```
my_data_arranged <- my_data %>% 
  arrange(group, dplyr::last())
```

这条语句的意思是，在 `my_data` 数据框中按照 `group` 列的值进行分组，并选择每组最后一行。最终的结果会被保存到变量 `my_data_arranged` 中。

另外，您还可以使用 `arrange()` 函数中的 `dplyr::nth()` 函数来选择每组的指定行。例如，如果您想要选择每组的第二行，可以使用如下语句:

```
my_data_arranged <- my_data %>% 
  arrange(group, dplyr::nth(2))
```

这条语句的意思是，在 `my_data` 数据框中按照 `group` 列的值进行分组，并选择每组的第二行。最终的结果会被保存到变量 `my_data_arranged` 中。

