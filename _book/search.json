[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R语言快速入门",
    "section": "",
    "text": "前言\n这是一本只讲干货的R语言入门书籍，希望对您有所帮助."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  安装",
    "section": "",
    "text": "2 安装\n安装R和RStudio是进行数据分析和统计建模的重要步骤。以下是在Windows操作系统上安装R和RStudio的简要步骤说明："
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "intro.html#安装r",
    "href": "intro.html#安装r",
    "title": "1  安装",
    "section": "1.1 安装R",
    "text": "1.1 安装R\n\n下载R安装程序： 访问R官方网站，选择一个离您位置较近的镜像站点，然后在页面上找到适合您操作系统的安装程序链接。\n运行安装程序： 下载完成后，运行下载的安装程序。您可能会看到一些安装选项，可以根据您的偏好进行选择，但通常情况下，您可以选择默认选项。\n选择安装位置： 在安装过程中，您可能需要选择R的安装位置。通常情况下，保留默认安装位置即可。\n完成安装： 完成上述步骤后，安装程序将开始将R安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "intro.html#安装rstudio",
    "href": "intro.html#安装rstudio",
    "title": "1  安装",
    "section": "1.2 安装RStudio",
    "text": "1.2 安装RStudio\n\n下载RStudio安装程序： 访问RStudio官方网站，找到免费版本的RStudio Desktop，并选择适合您操作系统的安装程序。\n运行安装程序： 下载完成后，运行安装程序。同样，您可能会看到一些安装选项，可以根据需要进行选择。\n完成安装： 安装程序将开始将RStudio安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "intro.html#启动rstudio",
    "href": "intro.html#启动rstudio",
    "title": "1  安装",
    "section": "1.3 启动RStudio",
    "text": "1.3 启动RStudio\n安装完成后，您可以从开始菜单（在Windows上）或应用程序列表中找到RStudio的图标，双击它以启动RStudio。\n请注意，这里提供的是Windows操作系统上的步骤。如果您使用的是Mac或Linux操作系统，步骤可能会稍有不同，但基本原理是相似的。安装完成后，您可以在RStudio中轻松编写和运行R代码，进行数据分析和统计建模等工作。"
  },
  {
    "objectID": "index.html#r能做什么",
    "href": "index.html#r能做什么",
    "title": "R语言快速入门",
    "section": "R能做什么？",
    "text": "R能做什么？\n\n数据分析\n数据可视化 上海新冠 R作图\n爬取数据 爬数据\n写博客 Shalom的博客\n做网站 Shiny 中华流病\n写书 bookdown"
  },
  {
    "objectID": "index.html#如何学习r语言",
    "href": "index.html#如何学习r语言",
    "title": "R语言快速入门-干货满满",
    "section": "如何学习R语言?",
    "text": "如何学习R语言?\n\n夯实基础。欲速则不达，打好基础，后续学起来会很轻松。\n比如，你要懂得什么是数据框(dataframe)，什么是行(row)和列(column)，什么是观测(observation)和变量(variable)，什么是包(package)和函数(function)，什么是向量(vector)和列表(list)，基本的术语不算多，掌握好基础你才能很好地组织你的问题，学会提问也是一门学问。初学者切忌啥都不懂，就一心只想实现某个功能，别的一概不问，这样的学习者注定学不好一门语言。\n博观约取。多了解R能做什么，在遇到问题的时候才会想起来用什么。如果自己阅读过的话那就翻出来针对性地仔细阅读，如果是自己也没遇到过得问题，那么请用基本的数据科学术语描述你的问题(例如：如何给数据框增加一列新的变量)，然后在互联网上或者交流社区提出你的问题，我相信，当你把你的问题表述清楚的时候，别人是很乐意回答你的问题的。学会正确的提问真的很重要!\n勤敲代码。眼过千遍不如手敲一遍。刚开始写代码总是需要模仿或者参考别人的代码，当敲的多了，你自然会记住代码。学R的最好方式是实践，所有在Excel中的操作都能在R中实现，从一个简单的筛选做起，将你之前用EXCEL完成的工作换成用R来完成，每一次练习都会提升你的编程技能。"
  },
  {
    "objectID": "数据读取.html",
    "href": "数据读取.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "install.html#安装r",
    "href": "install.html#安装r",
    "title": "1  安装",
    "section": "1.1 安装R",
    "text": "1.1 安装R\n\n下载R安装程序： 访问R官方网站，选择一个离您位置较近的镜像站点，然后在页面上找到适合您操作系统的安装程序链接。\n运行安装程序： 下载完成后，运行下载的安装程序。您可能会看到一些安装选项，可以根据您的偏好进行选择，但通常情况下，您可以选择默认选项。\n选择安装位置： 在安装过程中，您可能需要选择R的安装位置。通常情况下，保留默认安装位置即可。\n完成安装： 完成上述步骤后，安装程序将开始将R安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "install.html#安装rstudio",
    "href": "install.html#安装rstudio",
    "title": "1  安装",
    "section": "1.2 安装RStudio",
    "text": "1.2 安装RStudio\n\n下载RStudio安装程序： 访问RStudio官方网站，找到免费版本的RStudio Desktop，并选择适合您操作系统的安装程序。\n运行安装程序： 下载完成后，运行安装程序。同样，您可能会看到一些安装选项，可以根据需要进行选择。\n完成安装： 安装程序将开始将RStudio安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "install.html#启动rstudio",
    "href": "install.html#启动rstudio",
    "title": "1  安装",
    "section": "1.3 启动RStudio",
    "text": "1.3 启动RStudio\n安装完成后，您可以从开始菜单（在Windows上）或应用程序列表中找到RStudio的图标，双击它以启动RStudio。\n请注意，这里提供的是Windows操作系统上的步骤。如果您使用的是Mac或Linux操作系统，步骤可能会稍有不同，但基本原理是相似的。安装完成后，您可以在RStudio中轻松编写和运行R代码，进行数据分析和统计建模等工作。"
  },
  {
    "objectID": "data_import_export.html",
    "href": "data_import_export.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#如何学好r语言",
    "href": "index.html#如何学好r语言",
    "title": "R语言快速入门",
    "section": "如何学好R语言?",
    "text": "如何学好R语言?\n\n夯实基础。欲速则不达，打好基础，后续学起来会很轻松。\n比如，你要懂得什么是数据框(dataframe)，什么是行(row)和列(column)，什么是观测(observation)和变量(variable)，什么是包(package)和函数(function)，什么是向量(vector)和列表(list)，基本的术语不算多，掌握好基础你才能很好地组织你的问题，学会提问也是一门学问。初学者切忌啥都不懂，就一心只想实现某个功能，别的一概不问，这样的学习者注定学不好一门语言。\n博观约取。多了解R能做什么，在遇到问题的时候才会想起来用什么。如果自己阅读过的话那就翻出来针对性地仔细阅读，如果是自己也没遇到过得问题，那么请用基本的数据科学术语描述你的问题(例如：如何给数据框增加一列新的变量)，然后在互联网上或者交流社区提出你的问题，我相信，当你把你的问题表述清楚的时候，别人是很乐意回答你的问题的。学会正确的提问真的很重要!\n勤敲代码。眼过千遍不如手敲一遍。刚开始写代码总是需要模仿或者参考别人的代码，当敲的多了，你自然会记住代码。学R的最好方式是实践，所有在Excel中的操作都能在R中实现，从一个简单的筛选做起，将你之前用EXCEL完成的工作换成用R来完成，每一次练习都会提升你的编程技能。"
  },
  {
    "objectID": "index.html#r语言学习资料",
    "href": "index.html#r语言学习资料",
    "title": "R语言快速入门",
    "section": "R语言学习资料",
    "text": "R语言学习资料\n\nhub.rlearner.com 该网站汇集了众多R学习资源\nR论坛 R学习交流社区\n我的博客\n微信公众号：R数据分析与可视化"
  },
  {
    "objectID": "chapter/function.html#函数的构成要素",
    "href": "chapter/function.html#函数的构成要素",
    "title": "3  什么是函数",
    "section": "3.1 函数的构成要素",
    "text": "3.1 函数的构成要素\n一个函数通常由以下几个要素构成：\n\n函数名：这是函数的标识符，用于调用函数。\n参数（或形参）：这是函数的输入，函数在执行时需要根据参数进行计算。\n函数体：这是函数执行的代码块，包含了函数所要完成的操作。\n返回值（或实参）：这是函数的输出，函数执行完成后会返回一个值。\n\n这些要素构成了一个完整的函数，它们各自扮演着不同的角色，协同工作以完成函数的目标。\n例如，如果你要定义一个函数来计算数据集的平均值，那么可以这样写：\n\nmean &lt;- function(x) {\n\nsum = sum(x)\n\nn = length(x)\n\nreturn(sum / n)\n\n}\n这个函数的名称是mean，它有一个参数x，函数体中包含了计算平均值的代码，最后会返回计算结果。"
  },
  {
    "objectID": "chapter/function.html#r语言函数的分类",
    "href": "chapter/function.html#r语言函数的分类",
    "title": "3  什么是函数",
    "section": "3.2 R语言函数的分类",
    "text": "3.2 R语言函数的分类\nR语言中的函数可以分为几大类：\n\n基本函数：这些函数是R语言的内置函数，包括常见的数学运算、统计分析、数据处理和可视化等操作。例如，mean()函数可以计算数据集的平均值，plot()函数可以绘制数据的图形。\n用户自定义函数：这些函数是用户自己定义的，用于执行特定的任务。例如，如果你有一个复杂的分析流程，可以将这个流程封装成一个函数，以便在需要时调用。\n包中的函数：R语言中有许多第三方包，这些包提供了额外的函数和功能。例如，ggplot2包提供了用于绘制复杂图形的函数，dplyr包提供了高效的数据处理函数。要使用这些函数，需要先安装并加载相应的包。"
  },
  {
    "objectID": "chapter/function.html#函数示例",
    "href": "chapter/function.html#函数示例",
    "title": "3  什么是函数",
    "section": "3.3 函数示例",
    "text": "3.3 函数示例\n请写一个名叫f1的函数，作用是打印两个数的和，返回两个数的差。\n你可以用以下代码定义函数f1()：\n\nf1 &lt;- function(x, y) {\n\nprint(x + y)\n\nreturn (x - y)\n\n}\n在这个例子中，我们使用print()函数打印出两个数的和，并使用return()函数返回两个数的差。\n你可以用以下代码来调用这个函数：\n\nresult &lt;- f1(3, 5)\n在这里，我们将3和5作为参数传递给函数f1()，然后函数会先打印出两个数的和，再返回两个数的差。执行完这个代码后，变量result的值为-2。"
  },
  {
    "objectID": "chapter/function.html#定义函数可以不写return吗",
    "href": "chapter/function.html#定义函数可以不写return吗",
    "title": "3  什么是函数",
    "section": "3.4 定义函数可以不写return吗？",
    "text": "3.4 定义函数可以不写return吗？\n是的，在R语言中，定义函数时可以不写return()函数。如果函数没有使用return()函数指定返回值，则函数会自动返回最后一个计算结果作为返回值。例如，假设你有一个名为add()的函数，它可以接收两个数字，并返回它们的和。你可以用以下代码定义这个函数：\n\nadd &lt;- function(x, y) {\n\nx + y\n\n}\n在这个例子中，我们省略了return()函数，直接将两个数的和作为函数的返回值。你可以用以下代码来调用这个函数：\n\nresult &lt;- add(3, 5)\n在这里，我们将3和5作为参数传递给函数add()，函数会自动返回它们的和。执行完这个代码后，变量result的值为8。"
  },
  {
    "objectID": "chapter/function.html#函数的调用",
    "href": "chapter/function.html#函数的调用",
    "title": "3  什么是函数",
    "section": "3.5 函数的调用",
    "text": "3.5 函数的调用\n在R语言中，可以通过使用函数名称来调用函数。例如，要调用mean()函数，可以这样写：\n\nmean(data)\n其中，data是你要分析的数据集。\n当然，你也可以在调用函数时向函数传递额外的参数。例如，要计算一个数据集的中位数，可以这样写：\n\nmedian(data, na.rm = TRUE)\n在这个例子中，我们向median()函数传递了一个参数，即na.rm = TRUE。这个参数告诉R语言在计算中位数时忽略数据集中的缺失值。"
  },
  {
    "objectID": "chapter/function.html#写一个计算偏度和峰度的函数",
    "href": "chapter/function.html#写一个计算偏度和峰度的函数",
    "title": "3  什么是函数",
    "section": "3.6 写一个计算偏度和峰度的函数",
    "text": "3.6 写一个计算偏度和峰度的函数\n下面是一个计算偏度和峰度的函数：\n\nskew_kurtosis &lt;- function(x) {\n\nskew = sum((x - mean(x))^3) / (length(x) * sd(x)^3)\n\nkurtosis = sum((x - mean(x))^4) / (length(x) * sd(x)^4) - 3\n\nreturn(c(skew, kurtosis))\n\n}\n这个函数接收一个向量x作为参数，并计算x的偏度和峰度。计算完成后，会将结果放在一个向量中返回。\n例如，要计算一个数据集的偏度和峰度，可以这样写：\n\nskew_kurtosis(data)\n这个函数会计算data的偏度和峰度，并将结果作为向量返回。"
  },
  {
    "objectID": "chapter/install.html#安装r",
    "href": "chapter/install.html#安装r",
    "title": "1  安装",
    "section": "1.1 安装R",
    "text": "1.1 安装R\n\n下载R安装程序： 访问R官方网站，选择一个离您位置较近的镜像站点，然后在页面上找到适合您操作系统的安装程序链接。\n运行安装程序： 下载完成后，运行下载的安装程序。您可能会看到一些安装选项，可以根据您的偏好进行选择，但通常情况下，您可以选择默认选项。\n选择安装位置： 在安装过程中，您可能需要选择R的安装位置。通常情况下，保留默认安装位置即可。\n完成安装： 完成上述步骤后，安装程序将开始将R安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "chapter/install.html#安装rstudio",
    "href": "chapter/install.html#安装rstudio",
    "title": "1  安装",
    "section": "1.2 安装RStudio",
    "text": "1.2 安装RStudio\n\n下载RStudio安装程序： 访问RStudio官方网站，找到免费版本的RStudio Desktop，并选择适合您操作系统的安装程序。\n运行安装程序： 下载完成后，运行安装程序。同样，您可能会看到一些安装选项，可以根据需要进行选择。\n完成安装： 安装程序将开始将RStudio安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "chapter/install.html#启动rstudio",
    "href": "chapter/install.html#启动rstudio",
    "title": "1  安装",
    "section": "1.3 启动RStudio",
    "text": "1.3 启动RStudio\n安装完成后，您可以从开始菜单（在Windows上）或应用程序列表中找到RStudio的图标，双击它以启动RStudio。\n请注意，这里提供的是Windows操作系统上的步骤。如果您使用的是Mac或Linux操作系统，步骤可能会稍有不同，但基本原理是相似的。安装完成后，您可以在RStudio中轻松编写和运行R代码，进行数据分析和统计建模等工作。"
  },
  {
    "objectID": "chapter/data_import_export.html",
    "href": "chapter/data_import_export.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "chapter/base_install.html#安装r",
    "href": "chapter/base_install.html#安装r",
    "title": "1  安装",
    "section": "1.1 安装R",
    "text": "1.1 安装R\n\n下载R安装程序： 访问R官方网站，选择一个离您位置较近的镜像站点，然后在页面上找到适合您操作系统的安装程序链接。\n运行安装程序： 下载完成后，运行下载的安装程序。您可能会看到一些安装选项，可以根据您的偏好进行选择，但通常情况下，您可以选择默认选项。\n选择安装位置： 在安装过程中，您可能需要选择R的安装位置。通常情况下，保留默认安装位置即可。\n完成安装： 完成上述步骤后，安装程序将开始将R安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "chapter/base_install.html#安装rstudio",
    "href": "chapter/base_install.html#安装rstudio",
    "title": "1  安装",
    "section": "1.2 安装RStudio",
    "text": "1.2 安装RStudio\n\n下载RStudio安装程序： 访问RStudio官方网站，找到免费版本的RStudio Desktop，并选择适合您操作系统的安装程序。\n运行安装程序： 下载完成后，运行安装程序。同样，您可能会看到一些安装选项，可以根据需要进行选择。\n完成安装： 安装程序将开始将RStudio安装到您的计算机上。等待安装完成。"
  },
  {
    "objectID": "chapter/base_install.html#启动rstudio",
    "href": "chapter/base_install.html#启动rstudio",
    "title": "1  安装",
    "section": "1.3 启动RStudio",
    "text": "1.3 启动RStudio\n安装完成后，您可以从开始菜单（在Windows上）或应用程序列表中找到RStudio的图标，双击它以启动RStudio。\n请注意，这里提供的是Windows操作系统上的步骤。如果您使用的是Mac或Linux操作系统，步骤可能会稍有不同，但基本原理是相似的。安装完成后，您可以在RStudio中轻松编写和运行R代码，进行数据分析和统计建模等工作。"
  },
  {
    "objectID": "chapter/base_rstudio.html#rstudio与r的区别与联系",
    "href": "chapter/base_rstudio.html#rstudio与r的区别与联系",
    "title": "2  安装与使用",
    "section": "2.1 Rstudio与R的区别与联系",
    "text": "2.1 Rstudio与R的区别与联系\nRStudio是一款用于编写和执行R代码的集成开发环境（IDE），它可以帮助您管理工作空间、查看数据集和图形、执行代码并可视化结果等。R是一种编程语言，用于数据分析和统计计算。\nRStudio与R之间的关系可以理解为电脑和操作系统之间的关系，即RStudio是为R语言提供一个更友好的操作界面的工具。您可以使用RStudio进行R代码的编写和执行，也可以直接使用R语言进行编程。\n总而言之，RStudio是R语言的一个友好的用户界面，通过它可以更轻松地使用R语言进行数据分析和统计计算。但RStudio本身并不是R语言，它仅仅是一个工具，需要依赖R语言"
  },
  {
    "objectID": "chapter/base_rstudio.html#rstudio的常用快捷键有哪些",
    "href": "chapter/base_rstudio.html#rstudio的常用快捷键有哪些",
    "title": "2  Rstudio与R的区别与联系",
    "section": "2.1 Rstudio的常用快捷键有哪些？",
    "text": "2.1 Rstudio的常用快捷键有哪些？\n\n执行R代码并跳到下一行：按Ctrl + Enter键可以快速执行当前光标所在行的R代码，并跳到下一行。\n快速执行R代码：按Alt + Enter键可以快速执行当前光标所在行的R代码。\n快速注释/取消注释：按Ctrl + Shift + C键可以快速将当前光标所在行的R代码注释掉，再次按下该快捷键可以取消注释。"
  },
  {
    "objectID": "chapter/base_rstudio.html#rstudio新建r项目project",
    "href": "chapter/base_rstudio.html#rstudio新建r项目project",
    "title": "2  Rstudio与R的区别与联系",
    "section": "2.2 Rstudio新建R项目(Project)",
    "text": "2.2 Rstudio新建R项目(Project)\nRStudio提供了一个项目管理功能，可以帮助您管理项目代码。下面是使用RStudio新建项目代码的步骤：\n\n打开RStudio，在”文件”菜单中，选择”新建项目”。\n在弹出的对话框中，选择项目的存储位置和类型。\n点击”确定”按钮，RStudio就会为您创建一个新项目。\n在项目中，您可以通过”文件”菜单或”文件浏览器”窗口来创建、打开、保存和关闭R代码文件。\n在项目中，您可以通过”代码”菜单或”编辑”按钮来编辑R代码文件。\n在项目中，您可以通过”控制台”窗口来输入和执行R代码。\n在项目中，您可以通过”终端”窗口来执行Shell命令。\n在项目中，您可以通过”工作空间和环境”窗口来查看当前工作空间中的对象和数据集。"
  },
  {
    "objectID": "chapter/base_rstudio.html#r项目的一般文件构成",
    "href": "chapter/base_rstudio.html#r项目的一般文件构成",
    "title": "2  Rstudio与R的区别与联系",
    "section": "2.3 R项目的一般文件构成",
    "text": "2.3 R项目的一般文件构成\nRStudio project项目是一种用于管理R代码和数据的文件夹，通常包含以下文件和文件夹：\n\n.Rproj文件：这是项目的主文件，RStudio会识别它并打开项目。\n.Rhistory文件：这是项目的历史记录文件，包含执行的所有R代码。\n.RData文件：这是项目的工作空间文件，包含执行的所有R代码中定义的对象和数据集。\n.Renviron文件：这是项目的环境变量文件，包含定义的所有环境变量。\ndata文件夹：这是项目的数据文件夹，包含项目中使用的所有数据文件。\nR文件夹：这是项目的代码文件夹，包含项目中使用的所有R代码文件。"
  },
  {
    "objectID": "chapter/base_data_type.html#数据结构类型",
    "href": "chapter/base_data_type.html#数据结构类型",
    "title": "3  基本数据类型",
    "section": "3.1 数据结构类型",
    "text": "3.1 数据结构类型\nR语言中有多种数据结构类型，这些类型都有各自的名称和意义。下面是一些常见的数据结构类型：\n\n向量（vector）：这种类型的数据是一个一维的数值序列，例如c(1, 2, 3, 4)。\n矩阵（matrix）：这种类型的数据是一个二维的数值表格，例如matrix(1:9, nrow = 3)。\n数组（array）：这种类型的数据是一个多维的数值表格，例如array(1:8, dim = c(2, 2, 2))。\n数据框（data.frame）：这种类型的数据是一个二维的表格，可以包含不同类型的变量，例如data.frame(x = 1:3, y = c(“a”, “b”, “c”))。\n列表（list）：这种类型的数据是一个有序的元素集合，可以包含不同类型的对象，例如list(1, “hello”, TRUE)。"
  },
  {
    "objectID": "chapter/base_data_type.html#数据框dataframe的常见操作",
    "href": "chapter/base_data_type.html#数据框dataframe的常见操作",
    "title": "3  基本数据类型",
    "section": "3.2 数据框(dataframe)的常见操作",
    "text": "3.2 数据框(dataframe)的常见操作\n数据框是 R 语言中一种常用的数据结构，它是一个二维数据表，用于存储一组不同类型的数据，每列数据都有一个对应的列名。\n一些常见的数据框操作包括:\n\n创建数据框: 使用 data.frame() 函数创建数据框。\n查看数据框: 使用 head() 和 tail() 函数查看数据框的前几行和后几行，使用 str() 函数查看数据框的数据类型和结构。\n选择数据框中的某一列: 使用 $ 操作符选择某一列。\n选择数据框中的某一行: 使用行索引选择某一行。\n选择数据框中的某一个值: 使用行索引和列名选择某一个值。\n添加数据框列: 使用 $ 操作符添加新的列。\n添加数据框行: 使用 rbind() 函数添加新的行。\n删除数据框列: 使用 $ 操作符删除某一列。\n删除数据框行: 使用行索引删除某一行。\n排序数据框: 使用 order() 函数对某一列或多列进行排序。\n过滤数据框: 使用布尔运算符过滤数据框中符合条件的行。"
  },
  {
    "objectID": "chapter/base_data_type.html#代码示例",
    "href": "chapter/base_data_type.html#代码示例",
    "title": "3  基本数据类型",
    "section": "3.3 代码示例",
    "text": "3.3 代码示例\n# 创建一个数据框\nmy_data_frame &lt;- data.frame(\n  id = c(1, 2, 3),\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(20, 25, 30),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# 查看数据框的前几行\nhead(my_data_frame)\n\n# 查看数据框的后几行\ntail(my_data_frame)\n\n# 查看数据框的数据类型和结构\nstr(my_data_frame)\n\n# 选择数据框中的某一列\nmy_data_frame$name\n\n# 选择数据框中的某一行\nmy_data_frame[2, ]\n\n# 选择数据框中的某一个值\nmy_data_frame[2, \"name\"]\n\n# 添加数据框列\nmy_data_frame$score &lt;- c(90, 85, 80)\n\n# 添加数据框行\nnew_row &lt;- data.frame(id = 4, name = \"David\", age = 32, gender = \"M\", score = 75)\nmy_data_frame &lt;- rbind(my_data_frame, new_row)\n\n# 删除数据框列\nmy_data_frame$score &lt;- NULL\n\n# 删除数据框行\nmy_data_frame &lt;- my_data_frame[-2, ]\n\n# 排序数据框\nmy_data_frame &lt;- my_data_frame[order(my_data_frame$age), ]\n\n# 过滤数据框\nmy_data_frame[my_data_frame$age &gt;= 25, ]"
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引",
    "href": "chapter/base_data_type.html#行索引和列索引",
    "title": "3  基本数据类型",
    "section": "3.4 行索引和列索引",
    "text": "3.4 行索引和列索引\n在 R 语言中，数据框是一种二维数据表，其中每行表示一个观察值，每列表示一个变量。数据框的行索引和列索引是用来确定某一个特定的数据值的位置的方法。\n\n行索引: 数据框的行索引是从 1 开始的正整数，用来标识每一行。例如，在上面的代码中，第一行的行索引是 1，第二行的行索引是 2，以此类推。\n列索引: 数据框的列索引是列名，用来标识每一列。例如，在上面的代码中，第一列的列索引是 id，第二列的列索引是 name，以此类推。\n\n我们可以使用行索引和列索引来选择数据框中的某一个值。例如，如果我们想选择第二行第三列的值，可以使用 my_data_frame[2, \"age\"] 这样的语法。"
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引的常见用法",
    "href": "chapter/base_data_type.html#行索引和列索引的常见用法",
    "title": "3  基本数据类型",
    "section": "3.5 行索引和列索引的常见用法",
    "text": "3.5 行索引和列索引的常见用法\n行索引和列索引在 R 语言中都非常常见，它们有许多用途。下面是一些常见的行索引和列索引的用法:\n\n选择数据框中的某一个值: 可以使用行索引和列索引选择数据框中的某一个值。例如，my_data_frame[2, \"name\"] 表示选择第二行第 name 列的值。\n添加数据框行: 可以使用行索引和 rbind() 函数添加新的行到数据框中。例如，my_data_frame &lt;- rbind(my_data_frame, new_row) 表示将新的行 new_row 添加到数据框 my_data_frame 的末尾。\n删除数据框行: 可以使用行索引删除数据框中的某一行。例如，my_data_frame &lt;- my_data_frame[-2, ] 表示删除数据框 my_data_frame 中的第二行。\n排序数据框: 可以使用行索引和 order() 函数对数据框进行排序。例如，my_data_frame &lt;- my_data_frame[order(my_data_frame$age), ] 表示根据 age 列对数据框 `"
  },
  {
    "objectID": "chapter/base_data_type.html#在r语言中的含义",
    "href": "chapter/base_data_type.html#在r语言中的含义",
    "title": "3  基本数据类型",
    "section": "3.6 []在R语言中的含义",
    "text": "3.6 []在R语言中的含义\n在 R 语言中，[] 符号用来表示数据结构的索引。具体来说，它表示选择数据结构中的某一部分。例如，如果 my_data 是一个数据框，那么 my_data[2, \"name\"] 表示选择数据框 my_data 中的第二行第 name 列的值。\n在 R 语言中，[] 符号还可以用来进行其他操作，例如排序、过滤、删除等。它还可以用来创建新的数据结构，例如向量、数组、数据框等。有关具体用法，您可以参考 R 语言的相关文档和教程。"
  },
  {
    "objectID": "chapter/base_data_type.html#r语言中-和的区别",
    "href": "chapter/base_data_type.html#r语言中-和的区别",
    "title": "3  基本数据类型",
    "section": "3.7 R语言中<-和=的区别",
    "text": "3.7 R语言中&lt;-和=的区别\n在 R 语言中，&lt;- 和 = 都可以用来赋值，但它们之间还是有一些区别的。\n\n&lt;-: 这是 R 语言中最常用的赋值操作符。它用来将右侧的值赋给左侧的变量。例如，x &lt;- 5 表示将 5 赋给变量 x。\n=: 这是 R 语言中次常用的赋值操作符。它的语法与 &lt;- 类似，也用来将右侧的值赋给左侧的变量。例如，x = 5 也表示将 5 赋给变量 x。\n\n在实际使用中，&lt;- 和 = 的区别主要在于语义上的差异。通常来说，&lt;- 操作符更加符合人类的思维方式，因为它更加形象地表达了赋值的意义（即将值从右向左流动）。而 = 操作符则更像是一个等号，表示变量与值相等。\n在 R 语言中，一般来说，&lt;- 操作符更加常用，并且在 R 语言的文档和教程中也更常见。但 = 操作符也是可以使用的，它们之间并没有严格的限制。您可以根据个人喜好来选择使用哪一个。\n总的来说，建议使用 &lt;- 操作符进行赋值，这样能够更好地保持统一，并且能够更方便地理解代码。"
  },
  {
    "objectID": "chapter/base_data_type.html#中缺省行索引和列索引的意义",
    "href": "chapter/base_data_type.html#中缺省行索引和列索引的意义",
    "title": "3  基本数据类型",
    "section": "3.8 []中缺省行索引和列索引的意义",
    "text": "3.8 []中缺省行索引和列索引的意义\n在 R 语言中，当 [] 符号中的行索引或列索引缺省时，它们会被自动填充为默认值。\n对于行索引，如果缺省，默认值是 1:n，其中 n 是数据框中的行数。例如，如果 my_data 是一个数据框，那么 my_data[, \"name\"] 和 my_data[1:n, \"name\"] 是等价的，都表示选择数据框 my_data 中的所有行的 name 列。\n对于列索引，如果缺省，默认值是所有列的名称。例如，如果 my_data 是一个数据框，那么 my_data[2, ] 和 my_data[2, colnames(my_data)] 是等价的，都表示选择数据框 my_data 中的第二行的所有列。\n通过使用缺省行索引和列索引，可以使代码更简洁易读。例如，我们可以使用 my_data[, \"name\"] 表示选择数据框 my_data 中的所有行的 name 列，而不用写出每一行的行索引。这样做既能够保证代码的正确性，又能够提高代码的可读性。\n当然，在实际使用中，还需要注意一些特殊情况。例如，如果缺省行索引和列索引可能导致代码不易理解，或者会与其他语法产生冲突，那么就需要明确指定行索引和列索引了。总之，在使用 [] 符号时，应该根据实际情况谨慎选择是否使用缺省行索引和列索引。"
  },
  {
    "objectID": "chapter/base_data_type.html#行索引和列索引也可以填写布尔值吗",
    "href": "chapter/base_data_type.html#行索引和列索引也可以填写布尔值吗",
    "title": "3  基本数据类型",
    "section": "3.9 行索引和列索引也可以填写布尔值吗？",
    "text": "3.9 行索引和列索引也可以填写布尔值吗？\n是的，在 R 语言中，行索引和列索引也可以填写布尔值。这种用法可以用来选择数据框中满足某一条件的行和列。\n例如，如果 my_data 是一个数据框，那么 my_data[my_data$age &gt; 30, ] 表示选择数据框 my_data 中 age 列大于 30 的所有行。如果我们还想选择其中的 name 和 age 列，可以使用如下语句:\nmy_data[my_data$age &gt; 30, c(\"name\", \"age\")]\n这样，我们就可以快速选择数据框中满足某一条件的行和列了。这种方法非常方便，并且能够有效地过滤数据，为进一步的分析提供更为精细的数据。\n需要注意的是，在使用行索引和列索引时，需要确保它们的长度与数据框的行数和列数相同。如果长度不匹配，那么可能会导致代码出错或不能正常运行。因此，在使用行索引和列索引时，应该认真检查代码是否正确。"
  },
  {
    "objectID": "chapter/base_function.html#函数的构成要素",
    "href": "chapter/base_function.html#函数的构成要素",
    "title": "4  什么是函数",
    "section": "4.1 函数的构成要素",
    "text": "4.1 函数的构成要素\n一个函数通常由以下几个要素构成：\n\n函数名：这是函数的标识符，用于调用函数。\n参数（或形参）：这是函数的输入，函数在执行时需要根据参数进行计算。\n函数体：这是函数执行的代码块，包含了函数所要完成的操作。\n返回值（或实参）：这是函数的输出，函数执行完成后会返回一个值。\n\n这些要素构成了一个完整的函数，它们各自扮演着不同的角色，协同工作以完成函数的目标。\n例如，如果你要定义一个函数来计算数据集的平均值，那么可以这样写：\n\nmean &lt;- function(x) {\n\nsum = sum(x)\n\nn = length(x)\n\nreturn(sum / n)\n\n}\n这个函数的名称是mean，它有一个参数x，函数体中包含了计算平均值的代码，最后会返回计算结果。"
  },
  {
    "objectID": "chapter/base_function.html#r语言函数的分类",
    "href": "chapter/base_function.html#r语言函数的分类",
    "title": "4  什么是函数",
    "section": "4.2 R语言函数的分类",
    "text": "4.2 R语言函数的分类\nR语言中的函数可以分为几大类：\n\n基本函数：这些函数是R语言的内置函数，包括常见的数学运算、统计分析、数据处理和可视化等操作。例如，mean()函数可以计算数据集的平均值，plot()函数可以绘制数据的图形。\n用户自定义函数：这些函数是用户自己定义的，用于执行特定的任务。例如，如果你有一个复杂的分析流程，可以将这个流程封装成一个函数，以便在需要时调用。\n包中的函数：R语言中有许多第三方包，这些包提供了额外的函数和功能。例如，ggplot2包提供了用于绘制复杂图形的函数，dplyr包提供了高效的数据处理函数。要使用这些函数，需要先安装并加载相应的包。"
  },
  {
    "objectID": "chapter/base_function.html#函数示例",
    "href": "chapter/base_function.html#函数示例",
    "title": "4  什么是函数",
    "section": "4.3 函数示例",
    "text": "4.3 函数示例\n请写一个名叫f1的函数，作用是打印两个数的和，返回两个数的差。\n你可以用以下代码定义函数f1()：\n\nf1 &lt;- function(x, y) {\n\nprint(x + y)\n\nreturn (x - y)\n\n}\n在这个例子中，我们使用print()函数打印出两个数的和，并使用return()函数返回两个数的差。\n你可以用以下代码来调用这个函数：\n\nresult &lt;- f1(3, 5)\n在这里，我们将3和5作为参数传递给函数f1()，然后函数会先打印出两个数的和，再返回两个数的差。执行完这个代码后，变量result的值为-2。"
  },
  {
    "objectID": "chapter/base_function.html#定义函数可以不写return吗",
    "href": "chapter/base_function.html#定义函数可以不写return吗",
    "title": "4  什么是函数",
    "section": "4.4 定义函数可以不写return吗？",
    "text": "4.4 定义函数可以不写return吗？\n是的，在R语言中，定义函数时可以不写return()函数。如果函数没有使用return()函数指定返回值，则函数会自动返回最后一个计算结果作为返回值。例如，假设你有一个名为add()的函数，它可以接收两个数字，并返回它们的和。你可以用以下代码定义这个函数：\n\nadd &lt;- function(x, y) {\n\nx + y\n\n}\n在这个例子中，我们省略了return()函数，直接将两个数的和作为函数的返回值。你可以用以下代码来调用这个函数：\n\nresult &lt;- add(3, 5)\n在这里，我们将3和5作为参数传递给函数add()，函数会自动返回它们的和。执行完这个代码后，变量result的值为8。"
  },
  {
    "objectID": "chapter/base_function.html#函数的调用",
    "href": "chapter/base_function.html#函数的调用",
    "title": "4  什么是函数",
    "section": "4.5 函数的调用",
    "text": "4.5 函数的调用\n在R语言中，可以通过使用函数名称来调用函数。例如，要调用mean()函数，可以这样写：\n\nmean(data)\n其中，data是你要分析的数据集。\n当然，你也可以在调用函数时向函数传递额外的参数。例如，要计算一个数据集的中位数，可以这样写：\n\nmedian(data, na.rm = TRUE)\n在这个例子中，我们向median()函数传递了一个参数，即na.rm = TRUE。这个参数告诉R语言在计算中位数时忽略数据集中的缺失值。"
  },
  {
    "objectID": "chapter/base_function.html#写一个计算偏度和峰度的函数",
    "href": "chapter/base_function.html#写一个计算偏度和峰度的函数",
    "title": "4  什么是函数",
    "section": "4.6 写一个计算偏度和峰度的函数",
    "text": "4.6 写一个计算偏度和峰度的函数\n下面是一个计算偏度和峰度的函数：\n\nskew_kurtosis &lt;- function(x) {\n\nskew = sum((x - mean(x))^3) / (length(x) * sd(x)^3)\n\nkurtosis = sum((x - mean(x))^4) / (length(x) * sd(x)^4) - 3\n\nreturn(c(skew, kurtosis))\n\n}\n这个函数接收一个向量x作为参数，并计算x的偏度和峰度。计算完成后，会将结果放在一个向量中返回。\n例如，要计算一个数据集的偏度和峰度，可以这样写：\n\nskew_kurtosis(data)\n这个函数会计算data的偏度和峰度，并将结果作为向量返回。"
  },
  {
    "objectID": "chapter/base_data_io.html",
    "href": "chapter/base_data_io.html",
    "title": "6  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\nlibrary(rio)\ngetwd()\n\n[1] \"D:/Github/r-book/chapter\"\n\ndata&lt;-import('data/his.xlsx')"
  },
  {
    "objectID": "chapter/clean_dplyr.html#select",
    "href": "chapter/clean_dplyr.html#select",
    "title": "8  介绍",
    "section": "8.1 select()",
    "text": "8.1 select()\nselect()是dplyr包中的一个函数，它用于选择数据框中的特定列。例如，假设你有一个名为data的数据框，其中包含多列，你可以用以下代码选择列x和列y：\ndata &lt;- select(data, x, y)\n在这个例子中，select()函数会返回一个新的数据框，其中只包含原来数据框中的列x和列y。你也可以使用通配符来选择多个列。例如：\ndata &lt;- select(data, starts_with(\"x\"))\n这里的starts_with()函数会匹配所有以x开头的列名，例如x1、x2等，然后select()函数会返回一个新的数据框，其中包含原数据框中所有以x开头的列。\n除了选择列，你还可以用select()函数来排除列。例如：\ndata &lt;- select(data, -z)\n这里，我们使用了负号（-）来排除列z，select()函数会返回一个新的数据框，其中包含原数据框中除列z以外的所有列。\n你也可以使用类似的方式来排除多个列，例如：\ndata &lt;- select(data, -starts_with(\"x\"))\n这里，我们使用了starts_with()函数来匹配所有以x开头的列名，然后用负号排除这些列。select()函数会返回一个新的数据框，其中包含原数据框中除了以x开头的列以外的所有列。\n除了使用函数来选择或排除列，你还可以使用类似于SQL中的语法来指定要选择或排除的列。例如：\ndata &lt;- select(data, x, y, -z)\n这里，我们指定了要选择列x和列y，并使用负号排除列z。select()函数会返回一个新的数据框，其中包含原数据框中的列x、列y，除列z以外的所有列。\n\n8.1.1 选择器函数有哪些\n在 tidyverse 语法中，有多种选择器函数可以用来选择数据框中的特定列。这些选择器函数主要有如下几种:\n\nstarts_with()：选择名称以某个字符串开头的列。\nends_with()：选择名称以某个字符串结尾的列。\ncontains()：选择名称中包含某个字符串的列。\nmatches()：选择名称与某个正则表达式相匹配的列。\none_of()：选择名称在指定列表中出现过的列。\neverything()：选择所有列。\n\n例如，如果您想要选择 my_data 数据框中名称以 age 开头的列，可以使用如下语句:\nCopy codemy_data_selected &lt;- my_data %&gt;% select(starts_with(\"age\"))\n\n这条语句的意思是，在 my_data 数据框中选择名称以 age 开头的列，并将结果保存到变量 my_data_selected 中。\n如果您想要选择 my_data 数据框中名称以 age 结尾的列。\n如果您想要选择 my_data 数据框中名称以 age 结尾的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(ends_with(\"age\"))\n如果您想要选择 my_data 数据框中名称中包含 age 的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(contains(\"age\"))\n如果您想要选择 my_data 数据框中名称与正则表达式 \"a.e\" 相匹配的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(matches(\"a.e\"))\n如果您想要选择 my_data 数据框中名称在列表 c(\"age\", \"height\") 中出现过的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(one_of(c(\"age\", \"height\")))\n如果您想要选择 my_data 数据框中的所有列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(everything())\n\n\n8.1.2 其他的选择器函数\n除了以上提到的选择器函数，tidyverse 语法中还有一些其他选择器函数可以用来选择数据框中的特定列。例如，还有以下几种常用的选择器函数:\n\nnum_range()：选择名称在指定数字范围内的列。\ncols()：选择指定的列。\nwhich()：选择满足某个条件的列。\n\n例如，如果您想要选择 my_data 数据框中名称在数字范围 [1,5] 内的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(num_range(1, 5))\n如果您想要选择 my_data 数据框中指定的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(cols(age, height))\n这条语句的意思是，在 my_data 数据框中选择 age 和 height 两列，并将结果保存到变量 my_data_selected 中。\n如果您想要选择 my_data 数据框中满足某个条件的列，可以使用如下语句:\nmy_data_selected &lt;- my_data %&gt;% select(which(colnames(my_data) %in% c(\"age\", \"height\")))\n这条语句的意思是，在 my_data 数据框中选择名称在列表 c(\"age\", \"height\") 中出现过的列，并将结果保存到变量 my_data_selected 中。\n通过使用上述语句，您可以方便地选择数据框中的特定列。更多关于选择器函数的信息，可以参考 tidyverse 官方文档。\n\n\n8.1.3 match选择器函数中的正则表达式\n在 match() 选择器函数中，您可以使用正则表达式来匹配列名。正则表达式的语法与 R 语言的其他用法相同，详细内容可以参考 R 语言的官方文档。\n一般来说，您可以使用以下一些常用语法来构造正则表达式:\n\n.：表示任意一个字符。例如，正则表达式 \"a.c\" 可以匹配列名为 \"abc\"、\"aac\" 等。\n*：表示前面的字符可以重复出现任意次。例如，正则表达式 \"a*c\" 可以匹配列名为 \"c\"、\"ac\"、\"aaac\" 等。\n+：表示前面的字符必须至少出现一次。例如，正则表达式 \"a+c\" 可以匹配列名为 \"ac\"、\"aac\"、\"aaac\" 等，但不能匹配列名为 \"c\"。\n^：表示以某个字符串开头。例如，正则表达式 \"^a\" 可以匹配列名为 \"abc\"、\"ac\" 等，但不能匹配列名为 \"bc\"。\n$：表示以某个字符串结尾。例如，正则表达式 \"c$\" 可以匹配列名为 \"abc\"、\"ac\" 等，但不能匹配列名为 \"bc\"。\n\n除了以上语法，正则表达式还有很多其他用法。\n\n\n8.1.4 正则表达式的高级语法有哪些\n除了以上提到的正则表达式的基本语法，还有一些高级语法可以用来构造更复杂的正则表达式。例如，您可以使用以下一些常用语法来构造正则表达式:\n\n|：表示或的关系。例如，正则表达式 \"a|b\" 可以匹配列名为 \"a\"、\"b\" 等。\n[]：表示括号中的任意一个字符。例如，正则表达式 \"[ab]\" 可以匹配列名为 \"a\"、\"b\" 等。\n[a-z]：表示小写字母 a 到 z 中的任意一个字符。例如，正则表达式 \"[a-z]\" 可以匹配列名为 \"a\"、\"b\"、\"c\" 等。\n[A-Z]：表示大写字母 A 到 Z 中的任意一个字符。例如，正则表达式 \"[A-Z]\" 可以匹配列名为 \"A\"、\"B\"、\"C\" 等。\n\\\\d：表示任意一个数字。例如，正则表达式 \"\\\\d\" 可以匹配列名为 \"1\"、\"2\"、\"3\" 等。\n\n除了以上语法，正则表达式还有很多其他高级语法。您可以参考 R 语言的官方文档或相关资料来了解更多信息。"
  },
  {
    "objectID": "chapter/clean_dplyr.html#filter",
    "href": "chapter/clean_dplyr.html#filter",
    "title": "8  介绍",
    "section": "8.2 filter()",
    "text": "8.2 filter()\nfilter()是dplyr包中的一个函数，它用于根据指定的条件选择数据框中的行。例如，假设你有一个名为data的数据框，其中包含多行多列，你可以用以下代码选择值大于0的行：\ndata &lt;- filter(data, x &gt; 0)\n在这个例子中，filter()函数会返回一个新的数据框，其中只包含原数据框中值大于0的行。你也可以使用多个条件来进行筛选。例如：\ndata &lt;- filter(data, x &gt; 0, y &lt; 5)\n这里，filter()函数会返回一个新的数据框，其中只包含原数据框中值大于0且值小于5的行。\n除了简单的条件判断，你还可以在filter()函数中使用复杂的逻辑表达式来进行筛选。例如：\ndata &lt;- filter(data, x &gt; 0 & y &lt; 5 | z == 0)\n这里，我们使用了与（&）、或（|）以及等于（==）符号来构造复杂的逻辑表达式，filter()函数会返回一个新的数据框，其中只包含原数据框中符合"
  },
  {
    "objectID": "chapter/clean_dplyr.html#group_by",
    "href": "chapter/clean_dplyr.html#group_by",
    "title": "8  介绍",
    "section": "8.3 group_by()",
    "text": "8.3 group_by()\ngroup_by() 是 dplyr 包中的一个函数，它能够将数据按照指定的条件进行分组。通常，我们使用 group_by() 函数将数据按照某个变量的值进行分组，然后再对每个分组进行进一步的操作。\n例如，假设我们有一个数据框 my_data，它包含两个变量，分别为 name 和 age。如果我们想要将数据框 my_data 按照 age 变量的值进行分组，可以使用如下语句:\nmy_data_grouped &lt;- group_by(my_data, age)\n\n这条语句的意思是，使用 group_by() 函数将数据框 my_data 按照 age 变量的值进行分组，并将结果保存到变量 my_data_grouped 中。\n接下来，我们可以对每个分组进行进一步的操作。例如，如果我们想要计算每个分组中 name 变量的平均值，可以使用 summarise() 函数来实现:\nmy_data_summary &lt;- summarise(\n  my_data_grouped, \n  mean_name = mean(name))\n这条语句的意思是，对分组后的数据框 my_data_grouped 中的每个分组，计算 name 变量的平均值。\n\n8.3.1 多级分组\n当然，您也可以使用 group_by() 函数进行多级分组。例如，如果您想要将数据框 my_data 按照 age 和 height 两个变量的值进行多级分组，可以使用如下语句:\nCopy codemy_data_grouped &lt;- group_by(my_data, age, height, .drop = F)\n\n这条语句的意思是，按照 age 和 height 两个变量的值进行多级分组，并将结果保存到变量 my_data_grouped 中。\n在这个例子中，我们还使用了 .drop 参数，它的值设置为 F。这个参数的作用是，是否将分组后的数据框中不重要的列去掉。如果将 .drop 参数设置为 T，那么 R 会去掉分组后的数据框中不重要的列。如果将 .drop 参数设置为 F，则保留分组后的数据框中的所有列。\n在使用 group_by() 函数时，可以根据实际情况来调整分组条件和参数的值，以实现不同的分组效果。不管是单级分组还是多级分组，\n\n\n8.3.2 重新分组\n如果您想要对已经分组的数据进行重新分组，可以再次使用 group_by() 函数。例如，假设您已经将数据框 my_data 按照 age 变量的值进行分组，并将结果保存到变量 my_data_grouped 中，如果您想要按照 height 变量的值进行重新分组，可以使用如下语句:\nmy_data_grouped &lt;- group_by(my_data_grouped, height)\n这条语句的意思是，对已经分组的数据框 my_data_grouped 按照 height 变量的值进行重新分组，并将结果保存到变量 my_data_grouped 中。\n\n\n8.3.3 取消分组\n如果您想要取消分组，可以使用 ungroup() 函数。例如，假设您已经将数据框 my_data 按照 age 变量的值进行分组，并将结果保存到变量 my_data_grouped 中，如果您想要取消分组，可以使用如下语句:\nmy_data_ungrouped &lt;- ungroup(my_data_grouped)\n这条语句的意思是，对分组后的数据框 my_data_grouped 进行取消分组操作，并将结果保存到变量 my_data_ungrouped 中。\n取消分组后，数据框会恢复到未分组的状态。"
  },
  {
    "objectID": "chapter/clean_dplyr.html#summarise",
    "href": "chapter/clean_dplyr.html#summarise",
    "title": "8  介绍",
    "section": "8.4 summarise()",
    "text": "8.4 summarise()\nsummarise()是dplyr包中的一个函数，它用于对数据框进行汇总。例如，假设你有一个名为data的数据框，其中包含多行多列，你可以用以下代码计算每个组的均值：\ndata &lt;- group_by(data, group) %&gt;%\n  summarise(mean = mean(x))\n在这个例子中，我们首先使用group_by()函数将数据框按照列group进行分组，然后使用summarise()函数计算每个组的均值。summarise()函数会返回一个新的数据框，其中包含每个组的均值以及对应的组名。\n除了计算均值，你还可以使用summarise()函数计算其他统计量，例如求和、求最大值求最小值等。例如：\ndata &lt;- group_by(data, group) %&gt;%\n  summarise(sum = sum(x),\n            max = max(x),\n            min = min(x))\n在这个例子中，我们首先将数据框按照列group进行分组，然后使用summarise()函数计算每个组的和、最大值和最小值。summarise()函数会返回一个新的数据框，其中包含每个组的和、最大值和最小值以及对应的组名。"
  },
  {
    "objectID": "chapter/clean_dplyr.html#distinct",
    "href": "chapter/clean_dplyr.html#distinct",
    "title": "8  介绍",
    "section": "8.5 distinct()",
    "text": "8.5 distinct()\ndistinct() 函数是 tidyverse 包中的一个函数，用于选择指定数据框中不同的行。例如，如果您想要从 my_data 数据框中选择出不同的行，可以使用如下语句:\nmy_data_distinct &lt;- my_data %&gt;% distinct()\n这条语句的意思是，在 my_data 数据框中选择出不同的行，并将结果保存到变量 my_data_distinct 中。\n除了上述语句，您还可以使用 distinct() 函数指定选择哪些列来检查行的唯一性。例如，如果您想要仅以 age 列为依据来选择不同的行，可以使用如下语句:\nmy_data_distinct &lt;- my_data %&gt;% distinct(age)\n这条语句的意思是，在 my_data 数据框中选择出不同的行，并仅以 age 列为依据来检查行的唯一性。由于这条语句只检查了 age 列，所以如果两行中 age 列的值相同，那么这两行都会被认为是重复的，只会保留一行。最终的结果会被保存到变量 my_data_distinct 中。\n另外，您还可以使用 distinct() 函数中的 .keep_all 参数来指定是否保留所有列。例如，如果您想要保留所有列，可以使用如下语句:\nmy_data_distinct &lt;- my_data %&gt;% distinct(.keep_all = TRUE)\n\n这条语句的意思是，在 my_data 数据框中选择出不同的行，并保留所有列。由于这条语句指定了 .keep_all = TRUE 参数，所以所有的列都会被保留。最终的结果会被保存到变量 my_data_distinct 中。"
  },
  {
    "objectID": "chapter/clean_dplyr.html#arrange",
    "href": "chapter/clean_dplyr.html#arrange",
    "title": "8  介绍",
    "section": "8.6 arrange()",
    "text": "8.6 arrange()\narrange() 函数是 tidyverse 包中的一个函数，用于对指定数据框中的行进行排序。例如，如果您想要对 my_data 数据框中的行按照 age 列的值进行排序，可以使用如下语句:\nmy_data_arranged &lt;- my_data %&gt;% arrange(age)\n这条语句的意思是，在 my_data 数据框中按照 age 列的值进行排序，并将结果保存到变量 my_data_arranged 中。\n除了上述语句，您还可以使用 arrange() 函数中的 desc() 函数来指定是否按照降序进行排序。例如，如果您想要按照降序排序，可以使用如下语句:\nmy_data_arranged &lt;- my_data %&gt;% \n  arrange(desc(age))\n这条语句的意思是，在 my_data 数据框中按照 age 列的值按照降序进行排序，并将结果保存到变量 my_data_arranged 中。\n另外，您还可以使用 arrange() 函数中的 dplyr::first() 函数来选择每组第一行。例如，如果您想要选择每组第一行，可以使用如下语句:\nmy_data_arranged &lt;- my_data %&gt;% arrange(group, dplyr::first())\n这条语句的意思是，在 my_data 数据框中按照 group 列的值进行分组，并选择每组第一行。最终的结果会被保存到变量 my_data_arranged 中。\n除了以上语句，您还可以使用 arrange() 函数中的 dplyr::last() 函数来选择每组最后一行。例如，如果您想要选择每组最后一行，可以使用如下语句:\nmy_data_arranged &lt;- my_data %&gt;% \n  arrange(group, dplyr::last())\n这条语句的意思是，在 my_data 数据框中按照 group 列的值进行分组，并选择每组最后一行。最终的结果会被保存到变量 my_data_arranged 中。\n另外，您还可以使用 arrange() 函数中的 dplyr::nth() 函数来选择每组的指定行。例如，如果您想要选择每组的第二行，可以使用如下语句:\nmy_data_arranged &lt;- my_data %&gt;% \n  arrange(group, dplyr::nth(2))\n这条语句的意思是，在 my_data 数据框中按照 group 列的值进行分组，并选择每组的第二行。最终的结果会被保存到变量 my_data_arranged 中。"
  },
  {
    "objectID": "chapter/clean_string.html#str_length",
    "href": "chapter/clean_string.html#str_length",
    "title": "10  介绍",
    "section": "10.1 str_length()",
    "text": "10.1 str_length()\nstr_length() 函数是 stringr 包中的一个函数，用于计算字符串的长度（即字符串中字符的数量）。例如，下面的代码使用 str_length() 函数来计算字符串的长度：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_length() 函数来计算字符串的长度\nmy_string_length &lt;- str_length(my_string)\n\n# 输出结果\nprint(my_string_length)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[1] 13\n这表明，字符串 “Hello, world!” 的长度为 13（包含 13 个字符）。"
  },
  {
    "objectID": "chapter/clean_string.html#str_replace",
    "href": "chapter/clean_string.html#str_replace",
    "title": "10  介绍",
    "section": "10.2 str_replace()",
    "text": "10.2 str_replace()\nstr_replace() 函数是 stringr 包中的一个函数，用于替换字符串中的某个部分。该函数的语法格式如下：\nstr_replace(string, pattern, replacement)\n其中，string 是要进行替换操作的字符串，pattern 是要替换的子串，replacement 是用来替换的新子串。例如，下面的代码使用 str_replace() 函数来替换字符串中的某个部分：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_replace() 函数来替换字符串中的某个部分\nmy_string_replaced &lt;- str_replace(my_string, \"world\", \"R\")\n\n# 输出结果\nprint(my_string_replaced)\n运行上面的代码后，可以在 R 终端中看到输出的结果:\n[1] \"Hello, R!\""
  },
  {
    "objectID": "chapter/clean_string.html#str_detect",
    "href": "chapter/clean_string.html#str_detect",
    "title": "10  介绍",
    "section": "10.3 str_detect()",
    "text": "10.3 str_detect()\nstr_detect() 函数是 stringr 包中的一个函数，用于检测字符串中是否包含某个指定的子串。该函数的语法格式如下：\nstr_detect(string, pattern)\n其中，string 是要检测的字符串，pattern 是要查找的子串。例如，下面的代码使用 str_detect() 函数来检测字符串中是否包含某个指定的子串：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_detect() 函数来检测字符串中是否包含某个指定的子串\nis_substring_present &lt;- str_detect(my_string, \"world\")\n\n# 输出结果\nprint(is_substring_present)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[1] TRUE\n这表明，字符串 “Hello, world!” 中包含了子串 “world”。"
  },
  {
    "objectID": "chapter/clean_string.html#str_count",
    "href": "chapter/clean_string.html#str_count",
    "title": "10  介绍",
    "section": "10.4 str_count()",
    "text": "10.4 str_count()\nstr_count() 函数是 stringr 包中的一个函数，用于统计字符串中某个子串的出现次数。该函数的语法格式如下：\nstr_count(string, pattern)\n其中，string 是要检测的字符串，pattern 是要查找的子串。例如，下面的代码使用 str_count() 函数来统计字符串中某个子串的出现次数：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_count() 函数来统计字符串中某个子串的出现次数\nmy_string_count &lt;- str_count(my_string, \"l\")\n\n# 输出结果\nprint(my_string_count)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[1] 3\n这表明，字符串 “Hello, world!” 中子串 “l” 出现了 3 次。"
  },
  {
    "objectID": "chapter/clean_string.html#str_split",
    "href": "chapter/clean_string.html#str_split",
    "title": "10  介绍",
    "section": "10.5 str_split()",
    "text": "10.5 str_split()\nstr_split() 函数是 stringr 包中的一个函数，用于将字符串按照指定的分隔符进行分割，并返回一个字符串数组。该函数的语法格式如下：\nstr_split(string, pattern)\n其中，string 是要分割的字符串，pattern 是用来分割字符串的分隔符。例如，下面的代码使用 str_split() 函数来将字符串按照逗号进行分割：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_split() 函数将字符串按照逗号进行分割\nmy_string_split &lt;- str_split(my_string, \",\")\n\n# 输出结果\nprint(my_string_split)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[[1]]\n[1] \"Hello\" \" world!\"\n这表明，字符串 “Hello, world!” 被按照逗号进行分割后，得到了包含两个元素的字符串数组，分别为 “Hello” 和 ” world!“。"
  },
  {
    "objectID": "chapter/clean_string.html#str_c",
    "href": "chapter/clean_string.html#str_c",
    "title": "10  介绍",
    "section": "10.6 str_c()",
    "text": "10.6 str_c()\nstr_c() 函数是 stringr 包中的一个函数，用于将多个字符串拼接成一个新的字符串。该函数的语法格式如下：\nstr_c(..., sep = \"\")\n其中，... 表示可以传入任意多个字符串，sep 参数表示分隔符，即拼接后的字符串中，每两个字符串之间的分隔符。例如，下面的代码使用 str_c() 函数来将多个字符串拼接成一个新的字符串：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 使用 str_c() 函数将多个字符串拼接成一个新的字符串\nmy_string &lt;- str_c(\"Hello\", \"world\", \"!\")\n\n# 输出结果\nprint(my_string)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[1] \"Helloworld!\""
  },
  {
    "objectID": "chapter/clean_string.html#str_to_lower",
    "href": "chapter/clean_string.html#str_to_lower",
    "title": "10  介绍",
    "section": "10.7 str_to_lower()",
    "text": "10.7 str_to_lower()\nstr_to_lower() 函数是 stringr 包中的一个函数，用于将字符串中的所有字母转换为小写字母。该函数的语法格式如下：\nstr_to_lower(string)\n其中，string 是要转换的字符串。例如，下面的代码使用 str_to_lower() 函数将字符串中的所有字母转换为小写字母：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_to_lower() 函数将字符串中的所有字母转换为小写字母\nmy_string_lower &lt;- str_to_lower(my_string)\n\n# 输出结果\nprint(my_string_lower)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[1] \"hello, world!\"\n这表明，字符串 “Hello, world!” 中的所有字母都被转换为了小写字母。"
  },
  {
    "objectID": "chapter/clean_string.html#str_to_upper",
    "href": "chapter/clean_string.html#str_to_upper",
    "title": "10  介绍",
    "section": "10.8 str_to_upper()",
    "text": "10.8 str_to_upper()\nstr_to_upper() 函数是 stringr 包中的一个函数，用于将字符串中的所有字母转换为大写字母。该函数的语法格式如下：\nstr_to_upper(string)\n其中，string 是要转换的字符串。例如，下面的代码使用 str_to_upper() 函数将字符串中的所有字母转换为大写字母：\n# 加载 stringr 包\nlibrary(stringr)\n\n# 定义一个字符串\nmy_string &lt;- \"Hello, world!\"\n\n# 使用 str_to_upper() 函数将字符串中的所有字母转换为大写字母\nmy_string_upper &lt;- str_to_upper(my_string)\n\n# 输出结果\nprint(my_string_upper)\n运行上面的代码后，可以在 R 终端中看到输出的结果：\n[1] \"HELLO, WORLD!\"\n这表明，字符串 “Hello, world!” 中的所有字母都被转换为了大写字母。"
  },
  {
    "objectID": "chapter/clean_string.html#学习资料",
    "href": "chapter/clean_string.html#学习资料",
    "title": "10  介绍",
    "section": "10.9 学习资料",
    "text": "10.9 学习资料\n如果您想学习 stringr 包，可以参考以下学习资料：\n\n官方文档：https://stringr.tidyverse.org/\nR for Data Science 这本书提供了 stringr 包的基础知识。\n数据科学家 Hadley Wickham 的博客：https://www.tidyverse.org/articles/\n官方示例代码：https://github.com/tidyverse/stringr/tree/master/demo\n中文教程：https://www.r-bloggers.com/r-%e8%af%ad%e8%a8%80%e5%8c%85-stringr-%e7%9a%84%e4%b8%ad%e6%96%87%e6%95%99%e7%a8%8b/\n\n希望以上资料能够对您有所帮助。"
  },
  {
    "objectID": "chapter/clean_string.html#结语",
    "href": "chapter/clean_string.html#结语",
    "title": "10  介绍",
    "section": "10.10 结语",
    "text": "10.10 结语\n你觉得这篇文章怎么呢？我认为是很好地。 不过你可能不知道，本文99.9%的内容是由chatGPT写的,就是最近那个火遍全球的AI聊天机器人，而我只是做了部分编辑和整理工作。不愧是强大的生产力工具，用于程序语言教学方面恰到好处。 chatGPT YYDS！！！"
  },
  {
    "objectID": "chapter/clean_transform.html",
    "href": "chapter/clean_transform.html",
    "title": "11  使用ifelse函数将连续变量转换为分组变量",
    "section": "",
    "text": "在R语言中，你可以使用ifelse函数和dplyr包的case_when函数来将连续变量转换为分组变量。下面是一个Markdown教程，分别演示了这两种方法的用法。\n首先，让我们假设你有一个连续变量age，你想将其分成不同的年龄组。以下是使用ifelse函数的步骤：\nRCopy code# 导入必要的包\nlibrary(dplyr)\n\n# 创建一个包含连续变量的数据框\ndata &lt;- data.frame(age = c(25, 30, 35, 40, 45, 50, 55, 60))\n\n# 使用ifelse函数将age变量转换为分组变量\ndata$age_group &lt;- ifelse(data$age &lt; 30, \"Young\",\n                         ifelse(data$age &lt; 50, \"Middle-aged\", \"Old\"))\n\n# 查看结果\nhead(data)\n在上面的代码中，我们首先创建了一个包含连续变量age的数据框。然后，使用ifelse函数将age变量分成了三个不同的年龄组，并将结果存储在age_group列中。\n\n11.0.1 使用dplyr包的case_when函数将连续变量转换为分组变量\n现在，让我们看看如何使用dplyr包的case_when函数来执行相同的任务：\nRCopy code# 导入必要的包\nlibrary(dplyr)\n\n# 创建一个包含连续变量的数据框\ndata &lt;- data.frame(age = c(25, 30, 35, 40, 45, 50, 55, 60))\n\n# 使用case_when函数将age变量转换为分组变量\ndata &lt;- data %&gt;%\n  mutate(age_group = case_when(\n    age &lt; 30 ~ \"Young\",\n    age &lt; 50 ~ \"Middle-aged\",\n    TRUE ~ \"Old\"\n  ))\n\n# 查看结果\nhead(data)\n在上面的代码中，我们使用mutate函数和case_when函数来将age变量转换为不同的年龄组。case_when函数允许你根据条件创建分组变量，并使用~来指定条件和分组的名称。\n这就是如何使用ifelse函数和case_when函数将连续变量转换为分组变量的方法。你可以根据自己的需求修改条件和分组的名称。希望这个教程对你有所帮助！"
  },
  {
    "objectID": "chapter/clean_tips.html",
    "href": "chapter/clean_tips.html",
    "title": "R语言快速入门",
    "section": "",
    "text": "library(tidyverse)\n1penguins |&gt;\n2  mutate(\n    bill_ratio = bill_depth_mm / bill_length_mm,\n    bill_area  = bill_depth_mm * bill_length_mm\n  )\n\n1\n\nTake penguins, and then,\n\n2\n\nadd new columns for the bill ratio and bill area."
  },
  {
    "objectID": "chapter/base_package.html#使用包中的函数",
    "href": "chapter/base_package.html#使用包中的函数",
    "title": "5  包的基本概念",
    "section": "5.1 使用包中的函数",
    "text": "5.1 使用包中的函数\n一旦加载了一个包，你就可以使用其中包含的函数。例如，ggplot2包是一个用于数据可视化的常用包，它提供了各种绘图函数。以下是一个使用ggplot2包的简单示例，创建一个散点图：\n# 加载ggplot2包\nlibrary(ggplot2)\n\n# 创建一个数据框\ndata &lt;- data.frame(x = c(1, 2, 3, 4, 5), y = c(10, 15, 7, 20, 12))\n\n# 使用ggplot2创建散点图\nggplot(data, aes(x = x, y = y)) +\n  geom_point()\n\n在这个示例中，我们首先加载了ggplot2包，然后创建了一个包含x和y变量的数据框，最后使用ggplot2的函数创建了一个散点图。\n\n5.1.1 卸载包\n要卸载一个已安装的包，你可以使用remove.packages()函数。以下是卸载包的步骤：\n\n首先，使用installed.packages()函数查看已安装包的列表，找到要卸载的包的名称。\n\n# 查看已安装的包列表\ninstalled_packages &lt;- installed.packages()\ninstalled_packages[, \"Package\"]\n\n\n找到要卸载的包名称后，使用remove.packages()函数进行卸载。假设要卸载名为”mypackage”的包：\n\n# 卸载包\nremove.packages(\"mypackage\")\n\n\n\n5.1.2 更新包\n要更新已安装的包，你可以使用update.packages()函数。以下是更新包的步骤：\n\n首先，使用update.packages()函数来检查可用的包更新。这将列出需要更新的包以及它们的版本信息。\n\n# 检查可用的包更新\nupdate.packages(ask = FALSE)\n\n\n如果你希望更新所有可用的包，可以在update.packages()函数中设置ask参数为FALSE，然后运行函数。\n\n# 更新所有可用的包（不询问）\nupdate.packages(ask = FALSE)\n\n\n如果你只想更新特定的包，可以提供包名称的向量作为参数。例如，要更新”ggplot2”和”dplyr”包：\n\n# 更新特定的包\nupdate.packages(ask = FALSE, lib.loc = .libPaths(), oldPkgs = c(\"ggplot2\", \"dplyr\"))\n\n上述方法允许你卸载和更新R包，确保你的R环境中始终使用最新版本的包。在数据分析和编程中，定期更新包非常重要，因为更新通常包含了错误修复和新功能。"
  }
]